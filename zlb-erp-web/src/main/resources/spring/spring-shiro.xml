<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
    <!-- Shiro权限过滤过滤器定义 -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				<!--注释如下列表，激活 /** = anon 代表关闭SSO
				/sso*=casFilter
				/smember_lywsupport/**=anon
				/resources/**=anon
                /login/ssoLogin=anon
                /login/logout=logoutFilter
                /login/unauthorized=logoutFilter,anon
                /**=authc-->
                <!-- 注释此项，打开上面的注释代表开启SSO -->
                /** = anon 
			</value>
		</constructor-arg>
	</bean>
	
    <!--1、与web.xml对应的bean-->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
        <property name="securityManager" ref="securityManager" />  
        <!-- 如果没有认证将要跳转的登陆地址，http可访问的url，如果不在表单认证过虑器FormAuthenticationFilter中指定此地址就为身份认证地址 -->  
<!--         <property name="loginUrl" value="/login/init" />   -->
        <property name="loginUrl" value="${cas.server.url}/login?service=${cas.project.url}/sso" />  
        <!-- 没有权限跳转的地址 -->  
        <property name="unauthorizedUrl" value="/login/unAuthorized" />  
		<property name="filters">
			<map>
				<entry key="perms" ><bean class="com.zhilianbao.erp.web.base.security.ErpPermissionsAuthorizationFilter"></bean></entry>
				<entry key="casFilter" >
					<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">  
				        <!-- 配置验证错误时的失败页面  -->  
				        <property name="failureUrl" value="${cas.project.url}"/> 
				        <property name="successUrl" value="${cas.project.url}" /> 
				    </bean>  
				</entry>
				<entry key="logoutFilter" >
					<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
				          <property name="redirectUrl"  value="${cas.server.url}/logout?service=${cas.project.url}/sso"/>
					</bean>
				</entry>
			</map>
		</property>
		
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions" />
		</property>
    </bean>  
    
  
    <!-- 2、安全管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"> 
        <property name="realm" ref="casRealm" />
        <property name="subjectFactory" ref="casSubjectFactory"/>  
    </bean>  
    
    <!-- 如果要实现cas的remember me的功能，需要用到下面这个bean，并设置到securityManager的subjectFactory中 -->  
    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"/> 
    
    <bean id="casRealm" class="com.zhilianbao.erp.web.base.security.MyCasRealm">  
        <!-- <property name="defaultRoles" value="ROLE_USER"/>        -->
        <property name="casServerUrlPrefix" value="${cas.server.url}"/>  
        <!-- 客户端的回调地址设置，必须和sso过滤器拦截的地址一致 -->  
        <property name="casService" value="${cas.project.url}/sso"/>  
	    <property name="cachingEnabled" value="true"/>
	    <property name="authenticationCachingEnabled" value="true"/>
	    <property name="authenticationCacheName" value="authenticationCache"/>
	    <property name="authorizationCachingEnabled" value="true"/>
	    <property name="authorizationCacheName" value="authorizationCache"/>
    </bean> 
  
    
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>
</beans>
