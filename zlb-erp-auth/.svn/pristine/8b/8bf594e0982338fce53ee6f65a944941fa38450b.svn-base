package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.zhilianbao.erp.auth.entity.goods.GoodsCollectionBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsCollectionMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsCollectionService;
import com.zhilianbao.erp.auth.vo.goods.GoodsCollectionVo;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.ResponseResult;
@Service
@Transactional
public class GoodsCollectionServiceImpl implements IGoodsCollectionService {
	
	private static Logger logger=LogManager.getLogger(GoodsCollectionServiceImpl.class);
	
	@Autowired
	private GoodsCollectionMapper goodsCollectionMapper;
	
	@Override
	public ResponseResult<GoodsCollectionVo> queryCollectionDetailsByGoodsId(GoodsCollectionVo vo) {
		ResponseResult<GoodsCollectionVo> rspResult = new ResponseResult<GoodsCollectionVo>();
		try {
			List<GoodsCollectionVo> list = goodsCollectionMapper.queryCollectionDetailsByGoodsId(vo);
			if (CollectionUtils.isEmpty(list)) {
				return new ResponseResult<GoodsCollectionVo>(ResultEnum.EMPTY);
			}
            rspResult.setTotal(Long.parseLong(list.size()+""));
			rspResult.setRows(list);
		} catch (Exception e) {
			logger.error("【商品资料管理-组合商品】查询详情出错{}",vo,e);
			return new ResponseResult<GoodsCollectionVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}
	
//	@Override
//	public ResponseResult<GoodsCollectionVo> addData(List<GoodsCollectionVo> voList) {
//		ResponseResult<GoodsCollectionVo> rspResult = new ResponseResult<GoodsCollectionVo>();
//		try {
//			for(GoodsCollectionVo collectionVo : voList){
//				// 先写库存t_goods_stock表？？？
//				
//				// 再写组合t_goods_collection表
//				GoodsCollectionBean collectionBean = new GoodsCollectionBean();
////				collectionBean.setGoodsStockId(stockBean.getId());
//				if (collectionVo.getGoodsMode() == 0)//单品
//					collectionBean.setGoodsItemId(collectionVo.getComGoodsId());
//				else if(collectionVo.getGoodsMode() == 1)//多规格商品
//					collectionBean.setGoodsSkuId(collectionVo.getComGoodsId());
//				collectionBean.setAmount(collectionVo.getAmount());
//				collectionBean.setUsedStore(collectionVo.getUsedStore());
//				collectionBean.setId(null);
//				goodsCollectionMapper.insertSelective(collectionBean);
//			}
//		} catch (Exception e) {
//			logger.error("【商品资料管理-组合商品】新增出错{}", voList, e);
//			// 回滚
//			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//			return new ResponseResult<GoodsCollectionVo>(ResultEnum.SYS_ERR);
//		}
//		return rspResult;
//	}

	@Override
	public ResponseResult<GoodsCollectionVo> updateData(List<GoodsCollectionVo> voList) {
		ResponseResult<GoodsCollectionVo> rspResult = new ResponseResult<GoodsCollectionVo>();
		try {
			if (voList == null || voList.size() <= 0){
				return new ResponseResult<GoodsCollectionVo>(ResultEnum.SYS_ERR);
			}
			GoodsCollectionVo oldCollectionVo = voList.get(0);
			// 删除
			Long[] deleteIds = oldCollectionVo.getDeleteIds();
			if(deleteIds != null && deleteIds.length > 0)
				goodsCollectionMapper.deleteBatchByIds(deleteIds);
			
			for(GoodsCollectionVo collectionVo : voList){
				// 先写库存t_goods_stock表？？？
				
				// 再写组合t_goods_collection表
				GoodsCollectionBean collectionBean = new GoodsCollectionBean();
				PropertyUtils.copyProperties(collectionBean,collectionVo);
//				collectionBean.setGoodsStockId(stockBean.getId());
				if (collectionVo.getGoodsMode() == 0)//单品
					collectionBean.setGoodsItemId(collectionVo.getComGoodsId());
				else if(collectionVo.getGoodsMode() == 1)//多规格商品
					collectionBean.setGoodsSkuId(collectionVo.getComGoodsId());
				
				// 新增
				if(collectionVo.getId() == null)
					goodsCollectionMapper.insertSelective(collectionBean);
				// 修改
				else
					goodsCollectionMapper.updateByPrimaryKeySelective(collectionBean);
			}
		} catch (Exception e) {
			logger.error("【商品资料管理-组合商品】修改出错{}",voList, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return new ResponseResult<GoodsCollectionVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}


}
