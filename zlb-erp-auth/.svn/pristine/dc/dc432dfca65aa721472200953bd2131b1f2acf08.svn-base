package com.zhilianbao.erp.auth.impl.user;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.user.RoleBean;
import com.zhilianbao.erp.auth.mapper.user.RoleMapper;
import com.zhilianbao.erp.auth.service.user.IRoleService;
import com.zhilianbao.erp.auth.vo.user.RolePageVo;
import com.zhilianbao.erp.auth.vo.user.RoleVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.ResponseResult;


@Service
public class RoleServiceImpl implements IRoleService{

	private static Logger logger=LogManager.getLogger(RoleServiceImpl.class);
	
	@Autowired
	private RoleMapper roleMapper;
	
	/**
	 * 添加一个角色
	 */
	@Override
	public ResponseResult<RoleVo> addRole(RoleVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			RoleBean role =new RoleBean();
			PropertyUtils.copyProperties(role, vo);//将vo中的属性复制给role对象
			role.setId(null);
			role.setCreateTime(new Date());
			role.setUpdateTime(new Date());
			role.setEnabled(true);
			int res = roleMapper.insertSelective(role);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
		}
		return response;
	}

	/**
	 * 分页查找所有角色
	 * 
	 */
	@Override
	public ResponseResult<RoleVo> findAllRoles(RolePageVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			// 与mysql中的limit参数一致offset,limit
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); // 核心分页代码 开启分页查询，后面第一条查询语句会被分页
			// 注意:如果有两条查询语句，第二条不会被分页
			List<RoleVo> list = roleMapper.queryRolesListByPage(vo);
			if (Constants.ZERO == list.size()) {
				return new ResponseResult<RoleVo>(ResultEnum.EMPTY);
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
			for (RoleVo roleVo : list) {
				if(roleVo.getCreateTime() != null) {
					roleVo.setCreateTimeStr(sdf.format(roleVo.getCreateTime()));
				}
				if(roleVo.getUpdateTime() != null) {
					roleVo.setUpdateTimeStr(sdf.format(roleVo.getUpdateTime()));
				}
			}
			
			PageInfo<RoleVo> page = new PageInfo<RoleVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			List<RoleVo> roleList = page.getList();
			if (CollectionUtils.isEmpty(roleList)) {
				return new ResponseResult<RoleVo>(ResultEnum.EMPTY);
			}
			//分页必填的两个参数
			response.setTotal(total);
			response.setRows(roleList);
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("查询角色列表数据出错！{}",vo,e);
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

	@Override
	public ResponseResult<RoleVo> deleteRoleById(RoleVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			RoleBean role = new RoleBean();
			role.setId(vo.getId());
			role.setDeleted(true);
			role.setUpdateTime(new Date());
			roleMapper.deleteRoleById(role);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

	@Override
	public ResponseResult<RoleVo> modifyStatusById(RoleVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			RoleVo roleVo = roleMapper.findRoleById(vo);
			boolean status = false;
			if(roleVo != null) {
				status = !roleVo.getEnabled();
			}
			RoleBean role = new RoleBean();
			role.setId(vo.getId());
			role.setEnabled(status);
			role.setUpdateTime(new Date());
			roleMapper.updateByPrimaryKeySelective(role);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

	@Override
	public ResponseResult<RoleVo> findRoleById(RoleVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			RoleVo roleVo = roleMapper.findRoleById(vo);
			if(roleVo == null) {
				return new ResponseResult<RoleVo>(ResultEnum.EMPTY);
			}
			response.setData(roleVo);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

	@Override
	public ResponseResult<RoleVo> modifyRoleById(RoleVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			long operatorId = vo.getOperatorId();
			vo.setOperatorId(null);
			RoleVo roleVo = roleMapper.findRoleById(vo);
			if(roleVo == null) {
				return new ResponseResult<RoleVo>(ResultEnum.EMPTY);
			}
			RoleBean role = new RoleBean();
			PropertyUtils.copyProperties(role, roleVo);//将vo中的属性复制给role对象
			role.setUpdateTime(new Date());
			role.setEnabled(vo.getEnabled());
			role.setRoleDescription(vo.getRoleDescription());
			role.setRoleName(vo.getRoleName());
			role.setOperatorId(operatorId);
			
			roleMapper.updateByPrimaryKeySelective(role);
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

	@Override
	public ResponseResult<RoleVo> getAllRoles(RolePageVo vo) {
		ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			List<RoleVo> roleList = roleMapper.findAll(vo);
			if(roleList != null) {
				response.setRows(roleList);
			} else {
				return new ResponseResult<RoleVo>(ResultEnum.EMPTY);
			}
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
	}

}

/**
 * 
 * 
 * ResponseResult<RoleVo> response = new ResponseResult<RoleVo>();
		try {
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.getMessage());
			return new ResponseResult<RoleVo>(ResultEnum.SYS_ERR);
		}
		return response;
 * 
 * 
 */
