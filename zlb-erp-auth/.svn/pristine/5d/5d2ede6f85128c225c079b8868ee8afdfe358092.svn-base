//package com.zhilianbao.erp.auth.goods;
//
//import java.io.BufferedReader;
//import java.io.File;
//import java.io.FileReader;
//import java.io.IOException;
//import java.lang.reflect.InvocationTargetException;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import com.zhilianbao.erp.common.util.office.PoiExcelUtils;
//import org.apache.commons.beanutils.PropertyUtils;
//import org.junit.Test;
//import org.junit.runner.RunWith;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.test.context.ContextConfiguration;
//import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
//
//import com.alibaba.fastjson.JSON;
//import com.github.pagehelper.PageHelper;
//import com.github.pagehelper.PageInfo;
//import com.zhilianbao.erp.auth.entity.goods.GoodsBean;
//import com.zhilianbao.erp.auth.mapper.goods.GoodsMapper;
//import com.zhilianbao.erp.auth.service.goods.IGoodsService;
//import com.zhilianbao.erp.auth.service.parameter.ISystemDictService;
//import com.zhilianbao.erp.auth.service.parameter.ISystemParamService;
//import com.zhilianbao.erp.auth.vo.goods.GoodsVo;
//import com.zhilianbao.erp.auth.vo.parameter.rpc.DictVo;
//import com.zhilianbao.erp.common.constant.Constants;
//import com.zhilianbao.erp.common.vo.Page;
//import com.zhilianbao.erp.common.vo.ResponseResult;
//import com.zhilianbao.erp.common.vo.ViewSearchVo;
//
//
//@RunWith(SpringJUnit4ClassRunner.class)
////@ContextConfiguration(locations = "classpath*:/META-INF/spring/dubbo-provider.xml")
////引进dubbo后正确方式
//@ContextConfiguration(locations = { "classpath*:/application.xml","classpath*:/META-INF/spring/dubbo-consumer.xml" })
////@ContextConfiguration(locations = "classpath*:application.xml") //错误的加载方式
//public class TestGoods {
//	@Autowired
//	private GoodsMapper goodsMapper;
//	@Autowired
//	private IGoodsService goodsService;
//	@Autowired
//	private ISystemParamService systemParamService;
//	@Autowired
//	private ISystemDictService systemDictService;
//	//测试Mybatis的通用Mapper
//	@Test
//	public void testSelectAll(){
//		Map<String,Object> param = new HashMap<String,Object>();
//		param.put("id", 1);
//		System.out.println(param);
//		List<GoodsBean> list = goodsMapper.selectAll();
//		for(GoodsBean goods:list){
//			System.out.println(goods);
//		}
////		String jsonString = JSON.toJSONString(list);
////		System.out.println(jsonString);
//
//	}
//
//	@Test
//	public void testGetParamValue(){
//		ResponseResult<String> paramValue = systemParamService.getParamValue(52L, PoiExcelUtils.EXCEL_EXPORT_TOTAL_LIMIT);
//	}
//
//	@Test
//	public void testGetDictList(){
//		ResponseResult<List<DictVo>> dictList = systemDictService.getDictList(52L, Constants.TYPE_COMMON_ACTIVE);
//	}
//
//	@Test
//	public void testGetDictValue(){
//		ResponseResult<String> dictOfIdByType = systemDictService.getDescOfValueByType(52L, Constants.TYPE_COMMON_ACTIVE,"1");
//	}
//
//	@Test
//	public void testInitDictList(){
//		ResponseResult<Map<String, Object>> result = systemParamService.initDropDownBox(52L);
//		System.out.println(JSON.toJSONString(result));
//	}
//
//	@Test
//	public void testInsert(){
//		//准备数据
//		GoodsVo record = new GoodsVo();
//		record.setId(6L);
//		//根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号
//		GoodsBean goods = goodsMapper.selectByPrimaryKey(record);
//		for(int i=1;i<=5;i++){
//			//测试数据  方便区分
////			goods.setId((long)6+i);
//
////			goods.setGoodsName("goodsName"+i);
//
//			goods.setTitle("goodsName"+i);
//
//			goods.setId(null);
//			//保存一个实体，null的属性不会保存，会使用数据库默认值
//			goodsMapper.insertSelective(goods);
//		}
//		//查看插入后的数据
//		List<GoodsBean> list = goodsMapper.selectAll();
//		String jsonString = JSON.toJSONString(list);
//		System.out.println(jsonString);
//
//	}
//
//	//测试分页插件
//    @Test
//    public void testPageHelper(){
//       //与mysql中的limit参数一致offset,limit
//       PageHelper.offsetPage(3, 2); // 核心分页代码  开启分页查询，后面第一条查询语句会被分页 如果有两条，第二条不会被分页
//       List<GoodsBean> list = goodsMapper.selectAll();//查询语句
//       PageInfo<GoodsBean> page =  new PageInfo<GoodsBean>(list);
//       long total = page.getTotal();//获取数据库中的总条数
//       List<GoodsBean> goodsList = page.getList();//推荐使用这个结果集
//       for(GoodsBean goods:goodsList){
//    	   System.out.println(JSON.toJSONString(goods));
//       }
////       System.out.println("结果集："+JSON.toJSONString(goodsList));
//	   System.out.println("总条数：" +total);
//    }
//
//    @Test
//    public void QueryGoodsListByPage(){
//    	ViewSearchVo vo = new ViewSearchVo();
//    	vo.setOffset(2);
//    	vo.setPageSize(2);
//    	vo.setStatus("2");
//    	ResponseResult<Page<GoodsVo>> result = goodsService.queryGoodsListByPage(vo);
//    	for (GoodsVo goods : result.getData().getRows()) {
//			System.out.println(JSON.toJSONString(goods));
//		}
//
//
//    }
//
//    //测试商品管理分页查询
//	@Test
//	public void testQueryGoodsListByPage(){
//		ViewSearchVo vo = new ViewSearchVo();
//		vo.setSearchKeyword("name");
//		vo.setStatus("2");
//		ResponseResult<Page<GoodsVo>> result = goodsService.queryGoodsListByPage(vo);
//		System.out.println(JSON.toJSONString(result));
//	}
//
//	//测试查看商品详情
//	@Test
//	public void testQueryGoodsDetails(){
//		GoodsVo vo = new GoodsVo();
//		vo.setId(6L);
//		ResponseResult<GoodsVo> result = goodsService.queryGoodsDetails(vo);
//		System.out.println(JSON.toJSONString(result));
//	}
//
//	//测试商品删除
//	@Test
//	public void testDeleteGoods(){
//		GoodsVo vo = new GoodsVo();
//		vo.setId(6L);
//		ResponseResult<GoodsVo> result = goodsService.deleteGoods(vo);
//		System.out.println(JSON.toJSONString(result));
//	}
//
//	//测试商品上架/下架
//	@Test
//	public void testUpdateGoodsStatus(){
//		GoodsVo vo = new GoodsVo();
//		vo.setId(6L);
//		vo.setGoodsStatus(3);
//		ResponseResult<GoodsVo> result = goodsService.updateGoodsStatus(vo);
//		System.out.println(JSON.toJSONString(result));
//	}
//
//
//	//测试新增商品
//	@Test
//	public void testAddGoods(){
//         String jsonStr = ReadFile("goods.json");
//         System.out.println(jsonStr);
//         GoodsVo goodsVo = JSON.parseObject(jsonStr, GoodsVo.class);
//
//         goodsService.addGoods(goodsVo);
//	}
//
//	//测试编辑商品
//	@Test
//	public void testUpdateGoods(){
//		String jsonStr = ReadFile("goods.json");
//        System.out.println(jsonStr);
//        GoodsVo goodsVo = JSON.parseObject(jsonStr, GoodsVo.class);
//
//        goodsService.updateGoods(goodsVo);
//	}
//
//	@Test
//	public void testPropertyUtils() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException{
//		GoodsVo orig = new GoodsVo();
//		orig.setId(2L);
//		GoodsBean dest = new GoodsBean();
//
//		PropertyUtils.copyProperties(dest, orig);
//		System.out.println(JSON.toJSON(dest));
//	}
//	//读取当前路径下的摸个文件
//    public static String ReadFile(String path) {
//    	path = TestGoods.class.getResource("").getPath()+path;
//        File file = new File(path);
//        BufferedReader reader = null;
//        String laststr = "";
//        try {
//            reader = new BufferedReader(new FileReader(file));
//            String tempString = null;
//            while ((tempString = reader.readLine()) != null) {
//                laststr = laststr + tempString;
//            }
//            reader.close();
//        } catch (IOException e) {
//            e.printStackTrace();
//        } finally {
//            if (reader != null) {
//                try {
//                    reader.close();
//                } catch (IOException e1) {
//                }
//            }
//        }
//        return laststr;
//    }
//}
