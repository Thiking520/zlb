package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.zhilianbao.erp.auth.entity.goods.GoodsCollectionBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPriceBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsCollectionMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPriceMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsCollectionService;
import com.zhilianbao.erp.auth.vo.goods.CollGoodPriceVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsCollectionVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;
@Service
@Transactional
public class GoodsCollectionServiceImpl implements IGoodsCollectionService {
	
	private static Logger logger=LogManager.getLogger(GoodsCollectionServiceImpl.class);
	
	@Autowired
	private GoodsCollectionMapper goodsCollectionMapper;
	@Autowired
	private GoodsPriceMapper goodsPriceMapper;
	
	@Override
	public ResponseResult<Page<GoodsCollectionVo>> queryCollectionDetailsByGoodsId(GoodsCollectionVo vo) {
		ResponseResult<Page<GoodsCollectionVo>> rspResult = new ResponseResult<Page<GoodsCollectionVo>>();
		Page<GoodsCollectionVo> page = new Page<GoodsCollectionVo>();
		rspResult.setData(page);
		try {
			List<GoodsCollectionVo> list = goodsCollectionMapper.queryCollectionDetailsByGoodsId(vo);
			if (CollectionUtils.isEmpty(list)) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			page.setTotal(Long.parseLong(list.size()+""));
			page.setRows(list);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("【商品资料管理-组合商品】查询详情出错{}",vo,e);
			return rspResult.err();
		}
	}

	@Override
	public ResponseResult<GoodsCollectionVo> updateData(CollGoodPriceVo collGoodPriceVo) {
		ResponseResult<GoodsCollectionVo> rspResult = new ResponseResult<GoodsCollectionVo>();
		List<GoodsCollectionVo> voList = collGoodPriceVo.getGoodsCollectionVos();
		try {
			if (voList == null || voList.size() <= 0){
				return rspResult.err();
			}
			GoodsCollectionVo oldCollectionVo = voList.get(0);
			// 删除
			Long[] deleteIds = oldCollectionVo.getDeleteIds();
			if(deleteIds != null && deleteIds.length > 0){
				goodsCollectionMapper.deleteBatchByIds(deleteIds);
			}
			GoodsPriceBean bean = new GoodsPriceBean();
			bean.setGoodsId(collGoodPriceVo.getGoodsId());
			bean.setSuggestPrice(collGoodPriceVo.getSuggestPrice());
			bean.setMallPrice(collGoodPriceVo.getMallPrice());
			//不能用updateByPrimaryKeySelective会忽略更新属性为null的值
			int count = goodsPriceMapper.updateGroupData(bean);
			//当发现没有更新记录的时候则插入一条记录
			if(count<=0){
				bean.setCreator(collGoodPriceVo.getCreator());
				goodsPriceMapper.insertSelective(bean);
			}
			for(GoodsCollectionVo collectionVo : voList){
				// 先写库存t_goods_stock表？？？
				
				// 再写组合t_goods_collection表
				GoodsCollectionBean collectionBean = new GoodsCollectionBean();
				PropertyUtils.copyProperties(collectionBean,collectionVo);
//				collectionBean.setGoodsStockId(stockBean.getId());
				if (collectionVo.getGoodsMode() == 0)//单品
					collectionBean.setGoodsItemId(collectionVo.getComGoodsId());
				else if(collectionVo.getGoodsMode() == 1)//多规格商品
					collectionBean.setGoodsSkuId(collectionVo.getComGoodsId());
				
				// 新增
				if(collectionVo.getId() == null)
					goodsCollectionMapper.insertSelective(collectionBean);
				// 修改
				else
					goodsCollectionMapper.updateByPrimaryKeySelective(collectionBean);
			}
		} catch (Exception e) {
			logger.error("【商品资料管理-组合商品】修改出错{}",voList, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
		return rspResult;
	}

	@Override
	public ResponseResult<List<GoodsCollectionVo>> querCollection(GoodsVo searchVo) {
		ResponseResult<List<GoodsCollectionVo>> rspResult = new ResponseResult<List<GoodsCollectionVo>>();
		try {
			List<GoodsCollectionVo> list = goodsCollectionMapper.querCollection(searchVo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			return rspResult.success(list);
		} catch (Exception e) {
			logger.error("根据运营商获取组合商品列表出错{}",searchVo,e);
			return rspResult.err();
		}
	}

	@Override
	public void add(GoodsCollectionVo vo) {
		GoodsCollectionBean record = new GoodsCollectionBean();
		record.setGoodsId(vo.getGoodsId());
		record.setGoodsItemId(vo.getGoodsItemId());
		record.setGoodsSkuId(vo.getGoodsSkuId());
		record.setGoodsStockId(vo.getGoodsStockId());
		record.setAmount(vo.getAmount());
		record.setUsedStore(vo.getUsedStore());
		goodsCollectionMapper.insertSelective(record);
	}
}
