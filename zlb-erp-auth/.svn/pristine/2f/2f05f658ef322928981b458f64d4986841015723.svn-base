package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.zhilianbao.erp.auth.entity.goods.GoodsSkuListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsSkuRecodeBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsStockBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsCollectionMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsSkuListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsSkuRecodeMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsStockMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsSkuListService;
import com.zhilianbao.erp.auth.vo.goods.GoodsSkuListVo;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.ResponseResult;
@Service
@Transactional
public class GoodsSkuListServiceImpl implements IGoodsSkuListService {
	
	private static Logger logger=LogManager.getLogger(GoodsSkuListServiceImpl.class);
	
	@Autowired
	private GoodsSkuListMapper goodsSkuListMapper;
	@Autowired
	private GoodsStockMapper goodsStockMapper;
	@Autowired
	private GoodsSkuRecodeMapper goodsSkuRecodeMapper;
	@Autowired
	private GoodsCollectionMapper goodsCollectionMapper;
	
	@Override
	public ResponseResult<GoodsSkuListVo> querySkuDetailsByGoodsId(GoodsSkuListVo vo) {
		ResponseResult<GoodsSkuListVo> rspResult = new ResponseResult<GoodsSkuListVo>();
		try {
			List<GoodsSkuListVo> list = goodsSkuListMapper.querySkuDetailsByGoodsId(vo);
			if (CollectionUtils.isEmpty(list)) {
				return new ResponseResult<GoodsSkuListVo>(ResultEnum.EMPTY);
			}
            rspResult.setTotal(Long.parseLong(list.size()+""));
			rspResult.setRows(list);
		} catch (Exception e) {
			logger.error("【商品资料管理-多规格商品】查询详情出错{}",vo,e);
			return new ResponseResult<GoodsSkuListVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}


//	@Override
//	public ResponseResult<GoodsSkuListVo> addData(List<GoodsSkuListVo> voList) {
//		ResponseResult<GoodsSkuListVo> rspResult = new ResponseResult<GoodsSkuListVo>();
//		try {
//			for(GoodsSkuListVo skuListVo : voList){
//				// 先写库存表t_goods_stock
//				GoodsStockBean stockBean = new GoodsStockBean();
//				PropertyUtils.copyProperties(stockBean, skuListVo.getStockVo());
//				goodsStockMapper.insertSelective(stockBean);
//				
//				// 再写t_goods_sku_recode表
//				GoodsSkuRecodeBean recodeBean = new GoodsSkuRecodeBean();
//				recodeBean.setParentId(0L);
//				recodeBean.setSkuId(0L);
//				recodeBean.setSkuName(skuListVo.getSkuNames());
//				goodsSkuRecodeMapper.insertSelective(recodeBean);
//				String skuIdArray[] = skuListVo.getSkuIds().split(",");
//				String skuNameArray[] = skuListVo.getSkuNames().split("-");
//				for (int i = 0; i < skuIdArray.length; i++) {
//					GoodsSkuRecodeBean recodeChildBean = new GoodsSkuRecodeBean();
//					recodeChildBean.setParentId(recodeBean.getId());
//					recodeChildBean.setSkuId(Long.parseLong(skuIdArray[i]));
//					recodeChildBean.setSkuName(skuNameArray[i]);
//					goodsSkuRecodeMapper.insertSelective(recodeChildBean);
//				}
//				
//				// 最后写t_goods_sku_list表
//				GoodsSkuListBean goods = new GoodsSkuListBean();
//				PropertyUtils.copyProperties(goods,skuListVo);
//				goods.setRecordId(recodeBean.getId());
//				goods.setGoodsId(skuListVo.getGoodsId());
//				goods.setGoodsStockId(stockBean.getId());
//				goodsSkuListMapper.insertSelective(goods);
//			}
//		} catch (Exception e) {
//			logger.error("【商品资料管理-多规格商品】新增出错{}", voList, e);
//			// 回滚
//			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//			return new ResponseResult<GoodsSkuListVo>(ResultEnum.SYS_ERR);
//		}
//		return rspResult;
//	}


	@Override
	public ResponseResult<GoodsSkuListVo> updateData(List<GoodsSkuListVo> voList) {
		ResponseResult<GoodsSkuListVo> rspResult = new ResponseResult<GoodsSkuListVo>();
		try {
			if (voList == null || voList.size() <= 0){
				return new ResponseResult<GoodsSkuListVo>(ResultEnum.SYS_ERR);
			}
			GoodsSkuListVo skuListVo = voList.get(0);
			//删除，先判断删除的规格有没有被组合商品引用
			Long [] deleteIds = skuListVo.getDeleteIds();
			if(deleteIds != null && deleteIds.length > 0){
				int count = goodsCollectionMapper.getCountByDeleteIds(deleteIds);
				if(count > 0)
					return new ResponseResult<GoodsSkuListVo>(ResultEnum.IN_USE);
			}
			
			//删除
			if(deleteIds != null && deleteIds.length > 0)
				goodsSkuListMapper.deleteBatchByIds(deleteIds);
			// t_goods_stock，t_goods_sku_recode？？？
			for(GoodsSkuListVo goodsSkuItem : voList){
				//新增
				if(goodsSkuItem.getId() == null){
					//库存表t_goods_stock------------
					GoodsStockBean stockBean = new GoodsStockBean();
					PropertyUtils.copyProperties(stockBean, goodsSkuItem.getStockVo());
					goodsStockMapper.insertSelective(stockBean);
					
					//t_goods_sku_recode表------------
					GoodsSkuRecodeBean recodeBean = new GoodsSkuRecodeBean();
					recodeBean.setParentId(0L);
					recodeBean.setSkuId(0L);
					goodsSkuRecodeMapper.insertSelective(recodeBean);
					String skuIdArray[] = goodsSkuItem.getSkuIds().split(",");
//					String skuNameArray[] = goodsSkuItem.getSkuNames().split("-");
					for (int i = 0; i < skuIdArray.length; i++) {
						GoodsSkuRecodeBean recodeChildBean = new GoodsSkuRecodeBean();
						recodeChildBean.setParentId(recodeBean.getId());
						recodeChildBean.setSkuId(Long.parseLong(skuIdArray[i]));
						goodsSkuRecodeMapper.insertSelective(recodeChildBean);
					}
					
					//t_goods_sku_list表------------
					GoodsSkuListBean goods = new GoodsSkuListBean();
					PropertyUtils.copyProperties(goods,goodsSkuItem);
					goods.setRecordId(recodeBean.getId());
					goods.setGoodsStockId(stockBean.getId());
					goodsSkuListMapper.insertSelective(goods);
				}
				//修改
				else{
					//库存表t_goods_stock------------
					GoodsStockBean stockBean = new GoodsStockBean();
					PropertyUtils.copyProperties(stockBean, goodsSkuItem.getStockVo());
					//根据id查询对象，获取goodsStockId，再修改
					GoodsSkuListVo oldVo = goodsSkuListMapper.getById(goodsSkuItem);
					stockBean.setId(oldVo.getGoodsStockId());
					goodsStockMapper.updateByPrimaryKeySelective(stockBean);
					
					//t_goods_sku_list表，修改不需要考虑t_goods_sku_recode表
					GoodsSkuListBean goods = new GoodsSkuListBean();
					PropertyUtils.copyProperties(goods,goodsSkuItem);
					goodsSkuListMapper.updateByPrimaryKeySelective(goods);
				}
			}
		} catch (Exception e) {
			logger.error("【商品资料管理-多规格商品】修改出错{}",voList, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return new ResponseResult<GoodsSkuListVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}


}
