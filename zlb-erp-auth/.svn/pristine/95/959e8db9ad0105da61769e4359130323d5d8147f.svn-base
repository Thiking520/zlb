package com.zhilianbao.erp.auth.utils.cache;

import java.text.MessageFormat;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import com.zhilianbao.erp.auth.vo.parameter.rpc.ParamVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.redis.RedisCache;

/**
 * @company zhilianbao
 * @author meiqingsong
 * @date   2016年10月26日 下午2:41:47
 * @description 系统参数内存读取工具
 * @Version 1.0
 */
public class ParamCacheUtil {

	public static final String GLOBAL_PARAM_KEY_KEY_FORMAT = "OperatorId:{0}:Key:{1}";
	public static final String GLOBAL_PARAM_KEY = "GLOBAL_PARAM_KEY";

	private ParamCacheUtil() {
	}

	public static void remove(String key) {
		RedisCache.hdel(Constants.REDIS_SELECT_4, ParamCacheUtil.GLOBAL_PARAM_KEY, key);
	}
	
	public static void remove(Long operatorId,String key) {
		key = MessageFormat.format(GLOBAL_PARAM_KEY_KEY_FORMAT,operatorId,key);
		RedisCache.hdel(Constants.REDIS_SELECT_4, ParamCacheUtil.GLOBAL_PARAM_KEY, key);
	}

	/**
	 * 从redis查找参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static String get(String key) {
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key)){
			return RedisCache.hget(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key);
		} else {
			return null;
		}
	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static String get(Long operatorId , String key) {
		key = MessageFormat.format(GLOBAL_PARAM_KEY_KEY_FORMAT,String.valueOf(operatorId),key);
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key)){
			return RedisCache.hget(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key);
		} else {
			return null;
		}
	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static String get(String operatorId , String key) {
		key = MessageFormat.format(GLOBAL_PARAM_KEY_KEY_FORMAT,String.valueOf(operatorId),key);
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key)){
			return RedisCache.hget(Constants.REDIS_SELECT_4, GLOBAL_PARAM_KEY, key);
		} else {
			return null;
		}
	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static Integer getInt(Long operatorId , String key) {
		return Integer.parseInt(get(operatorId,key));
	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static Long getLong(Long operatorId , String key) {
		return Long.parseLong(get(operatorId,key));
	}

	/**
	 * 从redis查找参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static Integer getInt(String key) {
		return Integer.parseInt(get(key));
	}
	
	/**
	 * 更新缓存
	 * @param bean
	 * @return
	 */
	public static Integer updateCacheData(ParamVo bean){
		String key = MessageFormat.format(GLOBAL_PARAM_KEY_KEY_FORMAT,String.valueOf(bean.getOperatorId()),bean.getParamKey());
		bean.setParamKey(key);
		//redis缓存参数
		RedisCache.hset(Constants.REDIS_SELECT_4, ParamCacheUtil.GLOBAL_PARAM_KEY, bean.getParamKey(), bean.getParamValue());
		return 1;
	}
	
	/**
	 * 
	* @Title: remove
	* @author kuangzengye
	* @date 2017年4月10日上午9:55:06
	* @param bean void
	* @description:删除缓存
	 */
	public static void remove(ParamVo bean) {
		String key = MessageFormat.format(GLOBAL_PARAM_KEY_KEY_FORMAT,String.valueOf(bean.getOperatorId()),bean.getParamKey());
		RedisCache.hdel(Constants.REDIS_SELECT_4, ParamCacheUtil.GLOBAL_PARAM_KEY, key);
	}
	
	/**
	 * 更新缓存
	 */
	public static Integer updateCacheData(String key, String value){
		//redis缓存参数
		RedisCache.hset(Constants.REDIS_SELECT_4, ParamCacheUtil.GLOBAL_PARAM_KEY, key, value);
		return 1;
	}
	
	/**
	 * 更新缓存
	 * @param beans
	 * @return
	 */
	public static Integer updateCacheData(List<ParamVo> beans){
		if(beans == null){
			return 0;
		}
		for (ParamVo spb : beans) {
			
			updateCacheData(spb);
		}
		return beans.size();
	}
	


}
