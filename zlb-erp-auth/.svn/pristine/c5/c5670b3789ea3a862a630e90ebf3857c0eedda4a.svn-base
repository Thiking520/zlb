package com.zhilianbao.erp.auth.impl.parameter;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.parameter.SystemParamBean;
import com.zhilianbao.erp.auth.mapper.parameter.SystemParamMapper;
import com.zhilianbao.erp.auth.service.parameter.ISystemDictService;
import com.zhilianbao.erp.auth.service.parameter.ISystemParamService;
import com.zhilianbao.erp.auth.utils.cache.ParamCacheUtil;
import com.zhilianbao.erp.auth.vo.parameter.SystemParamVo;
import com.zhilianbao.erp.auth.vo.parameter.rpc.DictVo;
import com.zhilianbao.erp.auth.vo.parameter.rpc.ParamVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ViewSearchVo;

/**
 * 
 * @company zhilianbao
 * @author kuangzengye
 * @date   2017年3月11日下午3:42:53
 * @description:系统全局参数实现类
 */
@Service
public class SystemParamServiceImpl implements ISystemParamService {
	
	private static final Logger logger=LogManager.getLogger(SystemParamServiceImpl.class);
	
	@Autowired
	private SystemParamMapper systemParamMapper;
	@Autowired
	private ISystemDictService systemDictService;
	
	@Override
	public ResponseResult<SystemParamVo> getSystemParamById(Long id) {
		ResponseResult<SystemParamVo> rspResult = new ResponseResult<SystemParamVo>();
		try {
			SystemParamVo vo = new SystemParamVo();
			if(id == null){
				rspResult = rspResult.failure(ResultEnum.EMPTY);
				rspResult.setData(vo);
				return rspResult;
			}
			SystemParamBean bean = systemParamMapper.selectByPrimaryKey(id);
			PropertyUtils.copyProperties(vo, bean);
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("通过Id查询系统系统参数数据出错！{}",id,e);
			return rspResult.err();
		}
		return rspResult;		
	}
	
	@Override
	public ResponseResult<Page<SystemParamVo>> getPageByVo(ViewSearchVo vo) {
		ResponseResult<Page<SystemParamVo>> rspResult = new ResponseResult<Page<SystemParamVo>>();
		Page<SystemParamVo> page = new Page<SystemParamVo>();
		rspResult.setData(page);
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize());
			List<SystemParamVo> list = systemParamMapper.getPageByVo(vo);
			
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			PageInfo<SystemParamVo> pageInfo = new PageInfo<SystemParamVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			if (Constants.ZERO == total) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			convertList(vo.getOperatorId(),list);
			page.setTotal(total);
			page.setRows(list);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("分页查询系统参数数据出错", e);
			return rspResult.err();
		}
	}

	/**
	 * 
	* @author kuangzengye
	* @date 2017年3月22日下午1:46:43
	* @param list
	* @return List<ResponseOrderVo>
	* @description:查询结果集数据转换
	 */
	private List<SystemParamVo> convertList(Long operatorId,List<SystemParamVo> list) {

		//通过运营商ID和字典类型获取字典list
		List<DictVo> modifiableList = systemDictService.getDictList(operatorId,Constants.TYPE_COMMON_MODIFIABLE).getData();
		List<DictVo> statusList = systemDictService.getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();
		List<DictVo> groupList = systemDictService.getDictList(operatorId,Constants.TYPE_PARAM_GROUP).getData();
		List<DictVo> moduleList = systemDictService.getDictList(operatorId,Constants.TYPE_PARAM_MODULE).getData();
		for (SystemParamVo vo : list) {
			//转换可否修改状态
			for (DictVo dict : modifiableList) {
				if(StringUtils.equalsIgnoreCase(String.valueOf(vo.getModifiable()), dict.getDictValue())){
					vo.setModifiableStr(dict.getDictDesc());
				}
			}
		}
		for (SystemParamVo vo : list) {
			//转换生效失效状态
			for (DictVo dict : statusList) {
				if(StringUtils.equalsIgnoreCase(String.valueOf(vo.getStatus()), dict.getDictValue())){
					vo.setStatusStr(dict.getDictDesc());
				}
			}
		}
		for (SystemParamVo vo : list) {
			//转换分组状态
			for (DictVo dict : groupList) {
				if(StringUtils.equalsIgnoreCase(vo.getGroupName(), dict.getDictValue())){
					vo.setGroupStr(dict.getDictDesc());
				}
			}
		}
		for (SystemParamVo vo : list) {
			//转换模块状态
			for (DictVo dict : moduleList) {
				if(StringUtils.equalsIgnoreCase(String.valueOf(vo.getModule()), dict.getDictValue())){
					vo.setModuleStr(dict.getDictDesc());
				}
			}
		}
		return list;
	}
	
//	@Override
//	public ResponseResult<SystemParamVo> addSystemParam(SystemParamVo vo) {
//		ResponseResult<SystemParamVo> rspResult = new ResponseResult<SystemParamVo>();
//		try {
//			SystemParamBean record = new SystemParamBean();
//			PropertyUtils.copyProperties(record, vo);
//			record.setCreateTime(new Date());
//			record.setCreator(1L);//TODO 从同一方法中获取
//			record.setUpdateTime(record.getCreateTime());
//			record.setModifier(record.getCreator());
//			systemParamMapper.insertSelective(record);
//			// TODO 后期优化
//			ParamBean param = new ParamBean();
//			PropertyUtils.copyProperties(param, vo);
//			ParamCacheUtil.updateCacheData(param);
//			ParamInit.updateDictCacheData();
//		} catch (Exception e) {
//			logger.error("新增系统参数数据出错,{}",vo, e);
//			return rspResult.err();
//		}
//		return rspResult;
//	}
	
	@Override
	public ResponseResult<SystemParamVo> addOrModifySystemParam(SystemParamVo vo) {
		ResponseResult<SystemParamVo> rspResult = new ResponseResult<SystemParamVo>();
		try {
			SystemParamBean bean = new SystemParamBean();
			PropertyUtils.copyProperties(bean, vo);
			
			int count = 0;
			boolean flag = false;
			SystemParamBean old = null;
			if(bean.getId() == null){//新增
				if(StringUtils.isNotBlank(ParamCacheUtil.get(bean.getOperatorId(),bean.getParamKey()))){
					return rspResult.failure(ResultEnum.DATA_REPEAT);
				}
				bean.setCreateTime(new Date());
				bean.setCreator(vo.getUserId());
				bean.setUpdateTime(bean.getCreateTime());
				bean.setModifier(bean.getCreator());
				count = systemParamMapper.insertSelective(bean);
			} else {//更新
//				old = systemParamMapper.selectByPrimaryKey(bean.getId());
				//通过运营商ID跟ID查询数据  检验运营商操作
				SystemParamBean queryBean = new SystemParamBean();
				queryBean.setId(vo.getId());
				queryBean.setOperatorId(vo.getOperatorId());
				SystemParamBean isLegal = systemParamMapper.selectOne(queryBean);
				old = isLegal;
				if(isLegal != null){
					//key存在冲突
					if(StringUtils.isNotBlank(ParamCacheUtil.get(bean.getOperatorId(),bean.getParamKey())) && (old == null || old != null && !old.getId().equals(bean.getId()))){
						return rspResult.failure(ResultEnum.DATA_REPEAT);
					}
				
					bean.setUpdateTime(new Date());
					bean.setModifier(vo.getUserId());
					count = systemParamMapper.updateByPrimaryKeySelective(bean);
					flag = true;
				}else{
					return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
				}
			}
			if(count == 1){
				//更改、key不存在冲突，删掉原来的key
				if(flag && StringUtils.isBlank(ParamCacheUtil.get(bean.getOperatorId(),bean.getParamKey())) && old != null){
					ParamCacheUtil.remove(old.getOperatorId(),old.getParamKey());
				}
				ParamVo param = new ParamVo();
				PropertyUtils.copyProperties(param, bean);
				//如果是生效的 更新缓存 如果是失效 不再添加到缓存
				//生效 添加到缓存
				if(vo.getStatus() == 1){
					ParamCacheUtil.updateCacheData(param);
				//失效 从缓存删除
				}else{
					ParamCacheUtil.remove(param);
				}
				return new ResponseResult<SystemParamVo>();
			}else {
				return rspResult.err();
			}
		} catch (Exception e) {
			logger.error("新增或更新系统参数数据出错,{}",vo, e);
			return rspResult.err();
		}
	}

//	@Override
//	public ResponseResult<SystemParamVo> updateSystemParam(SystemParamVo vo) {
//		ResponseResult<SystemParamVo> rspResult = new ResponseResult<SystemParamVo>();
//		try {
//			SystemParamBean record = new SystemParamBean();
//			PropertyUtils.copyProperties(record, vo);
//			record.setUpdateTime(new Date());
//			record.setModifier(1L);//从同一方法中获取操作人ID
//			systemParamMapper.updateByPrimaryKeySelective(record);
//			
//			ParamBean param = new ParamBean();
//			PropertyUtils.copyProperties(param, vo);
//			ParamCacheUtil.updateCacheData(param);
//			ParamInit.updateDictCacheData();
//		} catch (Exception e) {
//			logger.error("更新系统参数数据出错，{}",vo, e);
//			return rspResult.err();
//		}
//		return rspResult;
//	}

	@Override
	public ResponseResult<SystemParamVo> effectSystemParam(SystemParamVo vo) {
		ResponseResult<SystemParamVo> rspResult = new ResponseResult<SystemParamVo>();
		try {
			Integer status = vo.getStatus();
			if(status == null){
				return rspResult.failure(ResultEnum.ILLEGAL_PARAM);
			}
			SystemParamBean record = new SystemParamBean();
			record.setId(vo.getId());
			record.setStatus(vo.getStatus());
			record.setUpdateTime(new Date());
			record.setModifier(vo.getUserId());
			int count = 0;
			//通过运营商ID跟ID查询数据  检验运营商操作
			SystemParamBean queryBean = new SystemParamBean();
			queryBean.setId(vo.getId());
			queryBean.setOperatorId(vo.getOperatorId());
			SystemParamBean isLegal = systemParamMapper.selectOne(queryBean);
			if(isLegal != null){
				count = systemParamMapper.updateByPrimaryKeySelective(record);
			}else{
				return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
			}
//			systemParamMapper.updateByPrimaryKeySelective(record);
			if(count != 1){
				return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
			}
			//缓存操作
//			record = systemParamMapper.selectByPrimaryKey(vo.getId());
			record = isLegal;
			ParamVo param = new ParamVo();
			PropertyUtils.copyProperties(param, record);
			//生效 添加到缓存
			if(vo.getStatus() == 1){
				ParamCacheUtil.updateCacheData(param);
			//失效 从缓存删除
			}else{
				ParamCacheUtil.remove(param);
			}
		} catch (Exception e) {
			logger.error("更新系统参数数据出错，{}",vo, e);
			return rspResult.err();
		}
		return rspResult;
	}
	
//	@Override
//	public ResponseResult<SystemParamVo> modifyDelSystemParamById(String type, Long id) {
//		try {
//			int count = systemParamMapper.deleteByPrimaryKeyAndType(type, id);
//			if(count == 0){
//				return rspResult.err();
//			}else {
//				DictCacheUtil.remove(DictCacheUtil.getDictOfIdByType(type, id));
//				return new ResponseResult<SystemParamVo>(ResultEnum.SUCCESSE);
//			}
//		} catch (Exception e) {
//			logger.error("", e);
//			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//			return rspResult.err();
//		}
//	}
	
	
	@Override
	public ResponseResult<String> getParamValue(Long operatorId,String paramKey) {
		logger.info("接收到获取全局参数请求参数，operatorId={},dictType={}",operatorId,paramKey);
		ResponseResult<String> rspResult = new ResponseResult<String>();
		//参数检查
		if(operatorId == null){
			return rspResult.failure(ResultEnum.OPERATOR__NULL);
		}
		if(StringUtils.isEmpty(paramKey)){
			return rspResult.failure(ResultEnum.PARAM_KEY_NULL);
		}
		SystemParamBean systemParamBean;
		try{
			String redisVaule = ParamCacheUtil.get(operatorId, paramKey);
			if(redisVaule != null){//如果redis中有直接返回
				rspResult.setData(redisVaule);
				logger.info("【redis】响应获取全局参数，rspResult:{}", JSON.toJSONString(rspResult));
				return rspResult;
			}
			//如果redis中没有，从数据库中获取
			SystemParamBean queryBean = new SystemParamBean();
			queryBean.setOperatorId(operatorId);
			queryBean.setParamKey(paramKey);
			queryBean.setStatus(1);
			systemParamBean = systemParamMapper.selectOne(queryBean);
			if(systemParamBean == null){
				return rspResult.failure(ResultEnum.EMPTY);
			}
			rspResult.setData(systemParamBean.getParamValue());

		}catch (Exception e) {
			logger.error("获取系统参数数据出错，[operatorId={},paramKey={}]",operatorId,paramKey, e);
			return rspResult.err();
		}
		//保存数据到redis
		ParamVo paramVo = new ParamVo();
		try {
			PropertyUtils.copyProperties(paramVo,systemParamBean);
			ParamCacheUtil.updateCacheData(paramVo);
		}catch (Exception e){
			logger.warn("保存redis数据出错，pramVo:{}",JSON.toJSONString(paramVo), e);
		}
		logger.info("响应获取全局参数，rspResult:{}", JSON.toJSONString(rspResult));
		return rspResult;
	}
	
	@Override
	public ResponseResult<Map<String, Object>> initDropDownBox(Long operatorId) {
		ResponseResult<Map<String, Object>> rspResult = new ResponseResult<Map<String, Object>>();
		try {
			// 通过运营商ID和字典类型获取字典list
			//通过运营商ID和字典类型获取字典list
			List<DictVo> statusList = systemDictService.getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();//从缓存获取通用的生效/失效list
			List<DictVo> moduleList = systemDictService.getDictList(operatorId,Constants.TYPE_PARAM_MODULE).getData();//从缓存获取通用的系统参数模块list
			Map<String, Object> result = new HashMap<String, Object>();
			result.put("statusList", statusList);
			result.put("moduleList", moduleList);
			logger.info(JSON.toJSONString(result));
			rspResult.setData(result);
		} catch (Exception e) {
			logger.error("初始化下拉框数据出错！", e);
			return rspResult.err();
		}
		return rspResult;
	}
	
	@Override
	public ResponseResult<Map<String, Object>> getToDropDownBox(Long operatorId,SystemParamVo vo) {
		ResponseResult<Map<String, Object>> rspResult = new ResponseResult<Map<String, Object>>();
		try {

			//通过运营商ID和字典类型获取字典list
			List<DictVo> statusList = systemDictService.getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();//从缓存获取通用的生效/失效list
			List<DictVo> modifiableList = systemDictService.getDictList(operatorId,Constants.TYPE_COMMON_MODIFIABLE).getData();//从缓存获取可修改/不可修改list
			List<DictVo> groupList = systemDictService.getDictList(operatorId,Constants.TYPE_PARAM_GROUP).getData();//从缓存获取分组list
			List<DictVo> moduleList = systemDictService.getDictList(operatorId,Constants.TYPE_PARAM_MODULE).getData();//从缓存模块名list
			
			Map<String, Object> result = new HashMap<String, Object>();
			result.put("statusList", statusList);
			result.put("modifiableList", modifiableList);
			result.put("groupList", groupList);
			result.put("moduleList", moduleList);
			result.put("vo", vo);
			logger.debug(JSON.toJSONString(result));
			rspResult.setData(result);
		} catch (Exception e) {
			logger.error("获取下拉框数据出错！", e);
			return rspResult.err();
		}
		return rspResult;
	}
		
}
