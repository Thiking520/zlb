package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsSkuListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsSkuRecodeBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsStockBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsCollectionMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsSkuListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsSkuRecodeMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsStockMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsSkuListService;
import com.zhilianbao.erp.auth.vo.goods.GoodsSkuListVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsVo;
import com.zhilianbao.erp.auth.vo.goods.facade.ResGoodsSkuListVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;
@Service
@Transactional
public class GoodsSkuListServiceImpl implements IGoodsSkuListService {
	
	private static Logger logger=LogManager.getLogger(GoodsSkuListServiceImpl.class);
	
	@Autowired
	private GoodsSkuListMapper goodsSkuListMapper;
	@Autowired
	private GoodsStockMapper goodsStockMapper;
	@Autowired
	private GoodsSkuRecodeMapper goodsSkuRecodeMapper;
	@Autowired
	private GoodsCollectionMapper goodsCollectionMapper;
	@Autowired
	private GoodsPropertyMapper goodsPropertyMapper;
	@Autowired
	private GoodsPropertyListMapper goodsPropertyListMapper;
	
	@Override
	public ResponseResult<Page<GoodsSkuListVo>> querySkuDetailsByGoodsId(GoodsSkuListVo vo) {
		ResponseResult<Page<GoodsSkuListVo>> rspResult = new ResponseResult<Page<GoodsSkuListVo>>();
		Page<GoodsSkuListVo> page = new Page<GoodsSkuListVo>();
		rspResult.setData(page);
		try {
			List<GoodsSkuListVo> list = goodsSkuListMapper.querySkuDetailsByGoodsId(vo);
			if (CollectionUtils.isEmpty(list)) {
				page.setTotal(0L);
				page.setRows(null);
				return rspResult.failure(ResultEnum.EMPTY);
			}
			page.setTotal(Long.parseLong(list.size()+""));
			page.setRows(list);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("【商品资料管理-多规格商品】查询详情出错{}",vo,e);
			return rspResult.err();
		}
	}


	@Override
	public ResponseResult<GoodsSkuListVo> updateData(List<GoodsSkuListVo> voList) {
		ResponseResult<GoodsSkuListVo> rspResult = new ResponseResult<GoodsSkuListVo>();
		try {
			if (voList == null || voList.size() <= 0){
				return rspResult.failure(ResultEnum.SYS_ERR);
			}
			GoodsSkuListVo skuListVo = voList.get(0);
			//删除，先判断删除的规格有没有被组合商品引用
			Long [] deleteIds = skuListVo.getDeleteIds();
			if(deleteIds != null && deleteIds.length > 0){
				int count = goodsCollectionMapper.getCountByDeleteIds(deleteIds);
				if(count > 0)
					return rspResult.failure(ResultEnum.IN_USE);
			}
			
			//删除
			if(deleteIds != null && deleteIds.length > 0)
				goodsSkuListMapper.deleteBatchByIds(deleteIds);
			// 写库
			for(int c = 0 ; c < voList.size() ; c ++){
				GoodsSkuListVo goodsSkuItemVo = voList.get(c);
				//新增
				if(goodsSkuItemVo.getId() == null){
					//库存表t_goods_stock------------
					GoodsStockBean stockBean = new GoodsStockBean();
					PropertyUtils.copyProperties(stockBean, goodsSkuItemVo.getStockVo());
					goodsStockMapper.insertSelective(stockBean);
					
					//t_goods_sku_recode表------------
					GoodsSkuRecodeBean recodeBean = new GoodsSkuRecodeBean();
					recodeBean.setParentId(0L);
					recodeBean.setSkuId(0L);
					goodsSkuRecodeMapper.insertSelective(recodeBean);
					String skuIdArray[] = goodsSkuItemVo.getSkuIds().split(",");
					for (int i = 0; i < skuIdArray.length; i++) {
						GoodsSkuRecodeBean recodeChildBean = new GoodsSkuRecodeBean();
						recodeChildBean.setParentId(recodeBean.getId());
						recodeChildBean.setSkuId(Long.parseLong(skuIdArray[i]));
						goodsSkuRecodeMapper.insertSelective(recodeChildBean);
					}
					
					//t_goods_sku_list表------------
					GoodsSkuListBean goodsSkuListBean = new GoodsSkuListBean();
					PropertyUtils.copyProperties(goodsSkuListBean,goodsSkuItemVo);
					goodsSkuListBean.setRecordId(recodeBean.getId());
					goodsSkuListBean.setGoodsStockId(stockBean.getId());
					goodsSkuListBean.setSkuSubtitle(goodsSkuItemVo.getSkuNames());
					goodsSkuListMapper.insertSelective(goodsSkuListBean);
					
					//商品属性中间表t_goods_property_list，商品必选属性
					Example example = new Example(GoodsPropertyBean.class);
					Criteria criteria = example.createCriteria();
					criteria.andEqualTo("isMust", 1);
					List<GoodsPropertyBean> propertyList = goodsPropertyMapper.selectByExample(example);
					for(GoodsPropertyBean goodsPropertyBean : propertyList){
						GoodsPropertyListBean goodsPropertyListBean = new GoodsPropertyListBean();
						goodsPropertyListBean.setGoodsId(goodsSkuItemVo.getGoodsId());
						goodsPropertyListBean.setPropertyId(goodsPropertyBean.getId());
						goodsPropertyListBean.setGoodsSkuId(goodsSkuListBean.getId());
						goodsPropertyListMapper.insertSelective(goodsPropertyListBean);
					}
				}
				//修改
				else{
					//库存表t_goods_stock------------
					GoodsStockBean stockBean = new GoodsStockBean();
					PropertyUtils.copyProperties(stockBean, goodsSkuItemVo.getStockVo());
					//根据id查询对象，获取goodsStockId，再修改
					GoodsSkuListVo oldVo = goodsSkuListMapper.getById(goodsSkuItemVo);
					stockBean.setId(oldVo.getGoodsStockId());
					goodsStockMapper.updateByPrimaryKeySelective(stockBean);
					
					//t_goods_sku_list表，修改不需要考虑t_goods_sku_recode表
					GoodsSkuListBean goods = new GoodsSkuListBean();
					PropertyUtils.copyProperties(goods,goodsSkuItemVo);
					goodsSkuListMapper.updateByPrimaryKeySelective(goods);
				}
			}
		} catch (Exception e) {
			logger.error("【商品资料管理-多规格商品】修改出错{}",voList, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
		return rspResult;
	}

	/**
	 * 多规格商品查询
	 * @param vo
	 * @return
	 * @throws IllegalAccessException 
	 * @throws InstantiationException 
	 */
	public GoodsSkuListVo queryGoodsSkuListById(Long id){
		GoodsSkuListVo vo = new GoodsSkuListVo();
		vo.setId(id);
		GoodsSkuListVo byId = goodsSkuListMapper.getById(vo);
		GoodsSkuListVo goodsSkuListVo = new GoodsSkuListVo();
		goodsSkuListVo.setId(byId.getId());
		goodsSkuListVo.setRelateOriginalGood(byId.getRelateOriginalGood());
		goodsSkuListVo.setConversionRate(byId.getConversionRate());
		goodsSkuListVo.setSkuSubtitle(byId.getSkuSubtitle());
		return goodsSkuListVo;
	}


	@Override
	public ResponseResult<List<ResGoodsSkuListVo>> querSku(GoodsVo searchVo) {
		ResponseResult<List<ResGoodsSkuListVo>> rspResult = new ResponseResult<List<ResGoodsSkuListVo>>();
		try {
			List<ResGoodsSkuListVo> list = goodsSkuListMapper.querSku(searchVo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			return rspResult.success(list);
		} catch (Exception e) {
			logger.error("根据运营商获取组合商品列表出错{}",searchVo,e);
			return rspResult.err();
		}
	}
	
	@Override
	public ResponseResult<List<ResGoodsSkuListVo>> querSkuDetail(GoodsVo searchVo) {
		ResponseResult<List<ResGoodsSkuListVo>> rspResult = new ResponseResult<List<ResGoodsSkuListVo>>();
		try {
			List<ResGoodsSkuListVo> list = goodsSkuListMapper.querSkuDetail(searchVo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			return rspResult.success(list);
		} catch (Exception e) {
			logger.error("根据运营商获取组合商品列表出错{}",searchVo,e);
			return rspResult.err();
		}
	}


	@Override
	public void add(GoodsSkuListVo vo) {
		GoodsSkuListBean record = new GoodsSkuListBean();
		record.setId(vo.getId());
		record.setGoodsId(vo.getGoodsId());
		record.setRecordId(vo.getRecordId());
		record.setGoodsStockId(vo.getGoodsStockId());
		record.setSkuStore(vo.getSkuStore());
		record.setSkuSubtitle(vo.getSkuSubtitle());
		record.setStockType(vo.getStockType());
		goodsSkuListMapper.insertSelective(record );
	}


	@Override
	public ResponseResult<GoodsSkuListVo> updateConversionRate(List<GoodsSkuListVo> voList) {
		ResponseResult<GoodsSkuListVo> rspResult = new ResponseResult<GoodsSkuListVo>();
		try {
			if (voList == null || voList.size() <= 0){
				return rspResult.failure(ResultEnum.SYS_ERR);
			}
			// update
			for(int c = 0 ; c < voList.size() ; c ++){
				GoodsSkuListVo goodsSkuItemVo = voList.get(c);
				GoodsSkuListBean goodsSkuListBean = new GoodsSkuListBean();
				goodsSkuListBean.setId(goodsSkuItemVo.getId());
				goodsSkuListBean.setRelateOriginalGood(goodsSkuItemVo.getRelateOriginalGood());
				goodsSkuListBean.setConversionRate(goodsSkuItemVo.getConversionRate());
				goodsSkuListMapper.updateConversionRate(goodsSkuListBean);
			}
		} catch (Exception e) {
			logger.error("【商品管理-转换率配置】多规格修改出错{}",voList, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
		return rspResult;
	}
}
