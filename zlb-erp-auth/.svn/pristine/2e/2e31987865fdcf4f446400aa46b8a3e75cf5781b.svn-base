package com.zhilianbao.erp.auth.utils.cache;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import com.zhilianbao.erp.auth.vo.parameter.rpc.DictBeanComparator;
import com.zhilianbao.erp.auth.vo.parameter.rpc.DictVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.redis.RedisCache;

/**
 * @company zhilianbao
 * @author meiqingsong
 * @date   2016年11月1日 下午2:08:35
 * @description 系统字典内存读取工具
 * @Version 1.0
 */
public class DictCacheUtil {
	
	private static final ConcurrentHashMap<String, List<DictVo>> DICT = new ConcurrentHashMap<String, List<DictVo>>();
	private static DictBeanComparator comparator = new DictBeanComparator();
	
	/** 数据字典通用字符串格式 */
	public static final String DICT_TYPE_KEY_FORMAT = "OperatorId:{0}:Type:{1}";
	public static final String DICT_PARAM_KEY_FORMAT = "OperatorId:{0}:Key:{1}";
	
	public static final String DICT_KEY = "DICT_KEY";
	
//	public static final String DICT_PARAM_KEY = "DICT_PARAM_KEY";
	

	private DictCacheUtil() {
	}

	public static void remove(String key) {
		RedisCache.hdel(Constants.REDIS_SELECT_4, DictCacheUtil.DICT_KEY, key);
	}
	
	public static Integer remove(DictVo bean) {
		String typeKey = MessageFormat.format(DictCacheUtil.DICT_TYPE_KEY_FORMAT,String.valueOf(bean.getOperatorId()),bean.getDictType());
		bean.setDictType(typeKey);
		//redis缓存参数
		List<DictVo> list = null;
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, DICT_KEY, bean.getDictType())){
			list = RedisCache.getList(Constants.REDIS_SELECT_4, DictVo.class, DICT_KEY, bean.getDictType());
			if(list == null){
				list = new ArrayList<DictVo>();
			}
			list.remove(bean);
		}
		Collections.sort(list, comparator);
		RedisCache.hset(Constants.REDIS_SELECT_4, DictCacheUtil.DICT_KEY, bean.getDictType(), list);
		
		return 1;
	}

	/**
	 * 从redis查找参数key对应的value，如果没找到就从本地map查找
	 * @param key
	 * @return
	 */
	public static List<DictVo> get(String key) {
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, DICT_KEY, key)){
			return RedisCache.getList(Constants.REDIS_SELECT_4, DictVo.class, DICT_KEY, key);
		} else {
			return DICT.get(key);
		}
	}
	
	/**
	 * 通过运营商ID和字典类型从redis查找参数key对应的value
	 * @param operatorId 运营商ID
	 * @param type 字典类型
	 * @return
	 */
	public static List<DictVo> get(Long operatorId,String type) {
		String key = MessageFormat.format(DICT_TYPE_KEY_FORMAT,String.valueOf(operatorId),type);
		return get(key);
	}
	
	/**
	 * 通过运营商ID和字典类型从redis查找参数key对应的value
	 * @param operatorId 运营商ID
	 * @param type 字典类型
	 * @return
	 */
	public static List<DictVo> get(String operatorId,String type) {
		String key = MessageFormat.format(DICT_TYPE_KEY_FORMAT,String.valueOf(operatorId),type);
		return get(key);
	}
	
	/**
	 * 通过类型和值获得描述文本
	 * @param type
	 * @param value
	 * @return
	 */
	public static String getDescOfValueByType(String type, String value){
		List<DictVo> list = get(type);
		if(list == null){
			return value;
		}
		for(DictVo dict :list){
			if(dict.getDictValue().equals(value)){
				return dict.getDictDesc();
			}
		}
		return value;
	}
	
	/**
	 * 通过运营商ID、类型和值获得描述文本
	 * @param type
	 * @param value
	 * @return
	 */
	public static String getDescOfValueByType(Long operatorId, String type, String value){
		String key = MessageFormat.format(DICT_TYPE_KEY_FORMAT,String.valueOf(operatorId),type);
		return getDescOfValueByType(key,value);
	}
	
	/**
	 * 通过运营商ID、类型和值获得描述文本
	 * @param type
	 * @param value
	 * @return
	 */
	public static String getDescOfValueByType(String operatorId, String type, String value){
		String key = MessageFormat.format(DICT_TYPE_KEY_FORMAT,operatorId,type);
		return getDescOfValueByType(key,value);
	}
	
	public static String getDescOfValueByType(String type, Boolean value){
		String valueStr = value == true ? "1":"0";
		return getDescOfValueByType(type,valueStr);
	}
		
	/**
	 * 通过类型和值获得key
	 * @param type
	 * @param value
	 * @return
	 */
//	public static String getKeyOfValueByType(String type, String value){
//		List<DictBean> list = get(type);
//		if(list == null){
//			return value;
//		}
//		for(DictBean dict :list){
//			if(dict.getDictValue().equals(value)){
//				return dict.getDictKey();
//			}
//		}
//		return null;
//	}
	
	/**
	 * 通过类型和值获得dict
	 * @param type
	 * @param value
	 * @return
	 */
	public static DictVo getDictOfValueByType(String type, String value){
		List<DictVo> list = get(type);
		if(list == null){
			return null;
		}
		for(DictVo dict :get(type)){
			if(dict.getDictValue().equals(value)){
				return dict;
			}
		}
		return null;
	}
	
	/**
	 * 通过类型和值获得dict
	 * @param type
	 * @param id
	 * @return
	 */
	public static DictVo getDictOfIdByType(String type, Long id){
		return getDictOfValueByType(type,String.valueOf(id));
	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value
	 * @param key
	 * @return
	 */
//	public static String getValue(Long operatorId , String key) {
//		key = MessageFormat.format(DICT_PARAM_KEY_FORMAT,operatorId,key);
//		return RedisCache.hget(Constants.REDIS_SELECT_4, DICT_PARAM_KEY, key);		
//	}

	/**
	 * 从redis查找指定运营商参数key对应的value
	 * @param key
	 * @return
	 */
//	public static Integer getInt(Long operatorId , String key) {
//		return Integer.parseInt(getValue(operatorId , key));
//	}
	
	/**
	 * 从redis查找指定运营商参数key对应的value
	 * @param key
	 * @return
	 */
//	public static Long getLong(Long operatorId , String key) {
//		return Long.parseLong(getValue(operatorId , key));
//	}

	/**
	 * 更新缓存
	 * @param bean
	 * @return
	 */
//	public static Integer updateCacheData(String key, String value){
//		//redis缓存参数
//		RedisCache.hset(Constants.REDIS_SELECT_4, DictCacheUtil.DICT_PARAM_KEY, key, value);
//		return 1;
//	}
			
	/**
	 * 更新缓存
	 * @return
	 */
	public static Integer updateCacheData(DictVo bean){
		//redis缓存参数
		List<DictVo> list = null;
//		String paramTypeKey = MessageFormat.format(DictCacheUtil.DICT_PARAM_KEY_FORMAT,bean.getOperatorId(),bean.getDictType());
		String typeKey = MessageFormat.format(DictCacheUtil.DICT_TYPE_KEY_FORMAT,String.valueOf(bean.getOperatorId()),bean.getDictType());
		bean.setDictType( typeKey );
		if(RedisCache.hexists(Constants.REDIS_SELECT_4, DictCacheUtil.DICT_KEY, bean.getDictType())){
			list = RedisCache.getList(Constants.REDIS_SELECT_4, DictVo.class, DictCacheUtil.DICT_KEY, bean.getDictType());
			list.remove(bean);
			list.add(bean);
		} else {
			list = new ArrayList<DictVo>();
			list.add(bean);
		}
		Collections.sort(list, comparator);
		RedisCache.hset(Constants.REDIS_SELECT_4, DictCacheUtil.DICT_KEY, bean.getDictType(), list);
		
//		String dictKey = MessageFormat.format(DictCacheUtil.DICT_PARAM_KEY_FORMAT,bean.getOperatorId(),bean.getDictKey());
//		bean.setDictKey(dictKey);
//		if(StringUtils.isNotBlank(bean.getDictKey()) && StringUtils.isNotBlank(bean.getDictValue())){
//			//字典值参数
//			DictCacheUtil.updateCacheData(bean.getDictKey(), bean.getDictValue());
//		}
//		//字典类型参数
//		if(StringUtils.isNotBlank(bean.getDictTitle())){
//			DictCacheUtil.updateCacheData(paramTypeKey, bean.getDictTitle());
//		}
		return 1;
	}
	
	/**
	 * 更新缓存
	 * @param beans
	 * @return
	 */
	public static Integer updateCacheData(List<DictVo> beans){
		if(beans == null){
			return 0;
		}
		for (DictVo sdb : beans) {
			//redis缓存参数
			updateCacheData(sdb);
		}
		return beans.size();
	}
}
