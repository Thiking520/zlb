package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.goods.GoodsTagBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsTagMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsTagService;
import com.zhilianbao.erp.auth.vo.goods.GoodsTagVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ViewSearchVo;
@Service
public class GoodsTagServiceImpl implements IGoodsTagService {
	
	private static Logger logger=LogManager.getLogger(GoodsTagServiceImpl.class);
	
	@Autowired
	private GoodsTagMapper goodsTagMapper;
	
	public ResponseResult<GoodsTagVo> queryListByPage(ViewSearchVo vo) {
		ResponseResult<GoodsTagVo> rspResult = new ResponseResult<GoodsTagVo>();
		try {
			// 与mysql中的limit参数一致offset,limit
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); // 核心分页代码 开启分页查询，后面第一条查询语句会被分页
			// 注意:如果有两条查询语句，第二条不会被分页
			List<GoodsTagVo> list = goodsTagMapper.queryListByPage(vo);
			if (Constants.ZERO == list.size()) {
				return new ResponseResult<GoodsTagVo>(ResultEnum.EMPTY);
			}
			PageInfo<GoodsTagVo> page = new PageInfo<GoodsTagVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			List<GoodsTagVo> resultList = page.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(resultList)) {
				return new ResponseResult<GoodsTagVo>(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
            rspResult.setTotal(total);
			rspResult.setRows(resultList);
		} catch (Exception e) {
			logger.error("【商品管理-商品标签】分页查询出错{}",vo,e);
			return new ResponseResult<GoodsTagVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsTagVo> queryDetails(GoodsTagVo paramVo) {
		ResponseResult<GoodsTagVo> rspResult = new ResponseResult<GoodsTagVo>();
		try {
			GoodsTagBean paramBean = new GoodsTagBean();
			paramBean.setId(paramVo.getId());
			GoodsTagBean bean = goodsTagMapper.selectByPrimaryKey(paramBean);
			GoodsTagVo vo = new GoodsTagVo();
			PropertyUtils.copyProperties(vo, bean);
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("【商品管理-商品标签】详情出错，id={}",paramVo.getId(), e);
			return new ResponseResult<GoodsTagVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;

	}

	@Override
	public ResponseResult<GoodsTagVo> addData(GoodsTagVo vo) {
		ResponseResult<GoodsTagVo> rspResult = new ResponseResult<GoodsTagVo>();
		try {
			GoodsTagBean goods = new GoodsTagBean();
			PropertyUtils.copyProperties(goods,vo);
			goodsTagMapper.insertSelective(goods);
		} catch (Exception e) {
			logger.error("【商品管理-商品标签】新增出错{}", vo, e);
			return new ResponseResult<GoodsTagVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsTagVo> deleteData(GoodsTagVo vo) {
		ResponseResult<GoodsTagVo> rspResult = new ResponseResult<GoodsTagVo>();
		try {
			Long [] deleteIds = new Long[1];
			deleteIds[0] = vo.getId();//现在是单个删除，以后可能批量删除
			int count = goodsTagMapper.getCountByDeleteIds(deleteIds);
			if(count > 0)
				return new ResponseResult<GoodsTagVo>(ResultEnum.IN_USE);
			GoodsTagBean goods = new GoodsTagBean();
			goods.setId(vo.getId());
			goods.setDeleted(true);
			goodsTagMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品管理-商品标签】删除出错,id={}",vo.getId(), e);
			return new ResponseResult<GoodsTagVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsTagVo> updateData(GoodsTagVo vo) {
		ResponseResult<GoodsTagVo> rspResult = new ResponseResult<GoodsTagVo>();
		try {
			GoodsTagBean goods = new GoodsTagBean();
			PropertyUtils.copyProperties(goods, vo);
			goodsTagMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品管理-商品标签】修改出错{}",vo, e);
			return new ResponseResult<GoodsTagVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}


}
