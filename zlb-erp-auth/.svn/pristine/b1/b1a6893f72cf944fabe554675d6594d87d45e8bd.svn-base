package com.zhilianbao.erp.auth.impl.goods;


import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.goods.GoodsBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsTagListBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsTagListMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsService;
import com.zhilianbao.erp.auth.vo.goods.GoodsTagVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsVo;
import com.zhilianbao.erp.auth.vo.goods.facade.RspGoodsRestVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.util.GenerateNo;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ViewSearchVo;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;
@Service
@Transactional
public class GoodsServiceImpl implements IGoodsService {
	
	private static Logger logger=LogManager.getLogger(GoodsServiceImpl.class);
	
	@Autowired
	private GoodsMapper goodsMapper;
	@Autowired
	private GoodsTagListMapper goodsTagListMapper;
	@Autowired
	private GoodsPropertyMapper goodsPropertyMapper;
	@Autowired
	private GoodsPropertyListMapper goodsPropertyListMapper;
	
	public ResponseResult<GoodsVo> queryGoodsListByPage(ViewSearchVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			// 与mysql中的limit参数一致offset,limit
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); // 核心分页代码 开启分页查询，后面第一条查询语句会被分页
			// 注意:如果有两条查询语句，第二条不会被分页
			List<GoodsVo> list = goodsMapper.queryGoodsListByPage(vo);
			if (Constants.ZERO == list.size()) {
				return new ResponseResult<GoodsVo>(ResultEnum.EMPTY);
			}
			PageInfo<GoodsVo> page = new PageInfo<GoodsVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			List<GoodsVo> goodsList = page.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(goodsList)) {
				return new ResponseResult<GoodsVo>(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
            rspResult.setTotal(total);
			rspResult.setRows(goodsList);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】分页查询出错",vo,e);
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}
	
	@Override
	public ResponseResult<GoodsVo> queryGoodsListForCollection(ViewSearchVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); 
			List<GoodsVo> list = goodsMapper.queryGoodsListForCollection(vo);
			if (Constants.ZERO == list.size()) {
				return new ResponseResult<GoodsVo>(ResultEnum.EMPTY);
			}
			PageInfo<GoodsVo> page = new PageInfo<GoodsVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			List<GoodsVo> goodsList = page.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(goodsList)) {
				return new ResponseResult<GoodsVo>(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
            rspResult.setTotal(total);
			rspResult.setRows(goodsList);
		} catch (Exception e) {
			logger.error("【组合商品页签-获取供选择的商品列表】分页查询出错",vo,e);
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> queryGoodsDetails(GoodsVo searchGoodsVo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsVo goodsVo = goodsMapper.queryDetailsById(searchGoodsVo);
			rspResult.setData(goodsVo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】详情出错，id={}",searchGoodsVo.getId(), e);
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> addGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsBean goodsBean = new GoodsBean();
			//先写主表t_goods
			PropertyUtils.copyProperties(goodsBean,vo);
			//设置商品编码，统一生成
			goodsBean.setGoodsCode(GenerateNo.generateInteriorNo("05", goodsBean.getOperatorId()+""));
			goodsMapper.insertSelective(goodsBean);
			
			//再写商品标签中间表t_goods_tag_list
			List<GoodsTagVo> tagList = vo.getTagList();
			for (GoodsTagVo tagVo : tagList) {
				Long tagId = tagVo.getId();
				GoodsTagListBean tagListBean = new GoodsTagListBean();
				tagListBean.setGoodsId(goodsBean.getId());
				tagListBean.setTagId(tagId);
				goodsTagListMapper.insertSelective(tagListBean);
			}
			
			//商品属性中间表t_goods_property_list，商品必选属性
			Example example = new Example(GoodsPropertyBean.class);
			Criteria criteria = example.createCriteria();
			criteria.andEqualTo("isMust", 1);
			List<GoodsPropertyBean> propertyList = goodsPropertyMapper.selectByExample(example);
			for(GoodsPropertyBean goodsPropertyBean : propertyList){
				GoodsPropertyListBean goodsPropertyListBean = new GoodsPropertyListBean();
				goodsPropertyListBean.setGoodsId(goodsBean.getId());
				goodsPropertyListBean.setPropertyId(goodsPropertyBean.getId());
				goodsPropertyListMapper.insertSelective(goodsPropertyListBean);
			}
			//返回id到前端
			vo.setId(goodsBean.getId());
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】新增出错{}", vo, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> deleteGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsBean goods = new GoodsBean();
			goods.setId(vo.getId());
			goods.setDeleted(true);
			goodsMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】删除出错,id={}",vo.getId(), e);
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> updateGoodsStatus(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsBean goods = new GoodsBean();
			goods.setId(vo.getId());
			goods.setGoodsStatus(vo.getGoodsStatus());
			goodsMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】上架/下架出错{}",vo, e);
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> updateGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			//先改主表t_goods
			GoodsBean goodsBean = new GoodsBean();
			PropertyUtils.copyProperties(goodsBean, vo);
			goodsMapper.updateByPrimaryKeySelective(goodsBean);
			
			//再改商品标签中间表t_goods_tag_list，直接delete再insert
			Example example = new Example(GoodsTagListBean.class);
			Criteria criteria = example.createCriteria();    
			criteria.andEqualTo("goodsId", goodsBean.getId());
			goodsTagListMapper.deleteByExample(example);
			List<GoodsTagVo> tagList = vo.getTagList();
			for (GoodsTagVo tagVo : tagList) {
				Long tagId = tagVo.getId();
				GoodsTagListBean tagListBean = new GoodsTagListBean();
				tagListBean.setGoodsId(goodsBean.getId());
				tagListBean.setTagId(tagId);
				goodsTagListMapper.insertSelective(tagListBean);
			}
			//返回id到前端
			vo.setId(goodsBean.getId());
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】修改出错{}",vo, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return new ResponseResult<GoodsVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public List<RspGoodsRestVo> mulGoodsInfo(List<String> list) {
		List<RspGoodsRestVo> rspList = goodsMapper.mulGoodsInfo(list);
		return rspList;
	}
}
