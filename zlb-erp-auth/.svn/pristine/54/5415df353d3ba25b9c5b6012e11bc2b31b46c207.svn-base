package com.zhilianbao.erp.auth.impl.parameter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.parameter.SystemDictBean;
import com.zhilianbao.erp.auth.entity.parameter.SystemParamBean;
import com.zhilianbao.erp.auth.mapper.parameter.SystemDictMapper;
import com.zhilianbao.erp.auth.service.parameter.ISystemDictService;
import com.zhilianbao.erp.auth.vo.parameter.SystemDictVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.entity.system.DictBean;
import com.zhilianbao.erp.common.util.cache.DictCacheUtil;
import com.zhilianbao.erp.common.util.cache.ParamCacheUtil;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ViewSearchVo;

/**
 * 
 * @company zhilianbao
 * @author kuangzengye
 * @date   2017年3月11日下午3:43:15
 * @description:数据字典业务实现类
 */
@Service
public class SystemDictServiceImpl implements ISystemDictService {
	
	private static final Logger logger=LogManager.getLogger(SystemDictServiceImpl.class);
	
	@Autowired
	private SystemDictMapper systemDictMapper;
	
	@Override
	public ResponseResult<SystemDictVo> getSystemDictById(Long id) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictVo vo = new SystemDictVo();
			if(id == null){
				rspResult = new ResponseResult<SystemDictVo>(ResultEnum.EMPTY);
				vo.setModifiable(0);
//				Long operatorId = 1L;//运营商ID,根据从页面传入 TODO 考虑从公用方法中调用获取
//				vo.setModifiable(DictCacheUtil.getInt(operatorId, Constants.KEY_COMMON_MODIFIABLE_NO));
				rspResult.setData(vo);
				return rspResult;
			}
			SystemDictBean bean = systemDictMapper.selectByPrimaryKey(id);
			PropertyUtils.copyProperties(vo, bean);
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("通过Id查询系统数据字典数据出错！{}",id,e);
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;		
	}
	
	@Override
	public ResponseResult<SystemDictVo> getPageByVo(ViewSearchVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize());
			List<SystemDictVo> list = systemDictMapper.getPageByVo(vo);
			
			if (Constants.ZERO == list.size()) {
				return new ResponseResult<SystemDictVo>(ResultEnum.EMPTY);
			}
			PageInfo<SystemDictVo> page = new PageInfo<SystemDictVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			if (Constants.ZERO == total) {
				return new ResponseResult<SystemDictVo>(ResultEnum.EMPTY);
			}

			rspResult.setTotal(total);
			rspResult.setRows(list);
		} catch (Exception e) {
			logger.error("分页查询数据字典数据出错", e);
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<SystemDictVo> addOrModifySystemDict(SystemDictVo vo) {
		try {
			SystemDictBean bean = new SystemDictBean();
			PropertyUtils.copyProperties(bean, vo);
			
			int count = 0;
			SystemDictBean newBean = null;
			String oldKey = null;
			List<DictBean> list = null;
			SystemDictBean old = null;
			if(bean.getId() != null){
				old = systemDictMapper.selectByPrimaryKey(bean.getId());
				oldKey = old.getDictKey();
			}
			if(StringUtils.isNoneBlank(bean.getDictType(),bean.getOperatorId())){
				list = DictCacheUtil.get(bean.getOperatorId(),bean.getDictType());
			} else if (old != null){
				list = DictCacheUtil.get(old.getOperatorId(),old.getDictType());
			}
			List<DictBean> sameList = new ArrayList<DictBean>();
			if(list != null){
				for (DictBean b : list) {
					if((bean.getDictValue() != null && b.getDictValue().equals(bean.getDictValue())) || (bean.getDictDesc() != null && b.getDictDesc().equals(bean.getDictDesc()))){
						sameList.add(b);
					}
				}
			}
			if(bean.getId() == null){
				if(StringUtils.isNotBlank(bean.getDictKey()) && StringUtils.isNotBlank(ParamCacheUtil.get(bean.getOperatorId(),bean.getDictKey()))){
					return new ResponseResult<SystemDictVo>(ResultEnum.DATA_REPEAT);
				}
				if(sameList.isEmpty()){
					
					if(StringUtils.isBlank(bean.getDictTitle())){
						bean.setDictTitle(ParamCacheUtil.get(bean.getDictType()));
					}
					count = systemDictMapper.insertSelective(bean);
				} else {
					return new ResponseResult<SystemDictVo>(ResultEnum.DATA_REPEAT);
				}
			} else {
				newBean = bean;
				if(StringUtils.isNotBlank(bean.getDictKey()) && StringUtils.isNotBlank(ParamCacheUtil.get(bean.getDictKey()))  && !bean.getId().equals(old.getId())){
					return new ResponseResult<SystemDictVo>(ResultEnum.DATA_REPEAT);
				}
				if(sameList.size() == 0 || (sameList.size() == 1 && sameList.get(0).getId().equals(bean.getId())) ){
					count = systemDictMapper.updateByPrimaryKeySelective(bean);
					if(StringUtils.isNotBlank(bean.getDictDesc())){
						old.setDictDesc(bean.getDictDesc());
					}
					old.setDictKey(bean.getDictKey());
					if(StringUtils.isNotBlank(bean.getDictValue())){
						old.setDictValue(bean.getDictValue());
					}
					old.setStatus(bean.getStatus());
					if(bean.getDictOrder() != null){
						old.setDictOrder(bean.getDictOrder());
					}
					bean = old;
				} else {
					return new ResponseResult<SystemDictVo>(ResultEnum.DATA_REPEAT);
				}
			}
			if(count == 0){
				return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
			}else {
				if((newBean != null && (StringUtils.isNotBlank(newBean.getDictKey()) && StringUtils.isBlank(ParamCacheUtil.get(newBean.getDictKey())) || StringUtils.isBlank(newBean.getDictKey()))) && StringUtils.isNotBlank(oldKey) ){
					ParamCacheUtil.remove(oldKey);
				}
				DictBean dictBean = new DictBean();
				PropertyUtils.copyProperties(bean, vo);
				DictCacheUtil.updateDictCacheData(dictBean);
				
				return new ResponseResult<SystemDictVo>();
			}
		} catch (Exception e) {
			logger.error("", e);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
	}
	
	@Override
	public ResponseResult<SystemDictVo> addSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictBean record = new SystemDictBean();
			PropertyUtils.copyProperties(record, vo);
			record.setCreateTime(new Date());
			record.setCreator(vo.getUserId());
			record.setUpdateTime(record.getCreateTime());
			record.setModifier(record.getCreator());
			systemDictMapper.insertSelective(record);
			//待优化 TODO
			ParamInit.updateDictCacheData();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("新增数据字典数据出错,{}",vo, e);
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Override
	public ResponseResult<SystemDictVo> updateSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictBean record = new SystemDictBean();
			PropertyUtils.copyProperties(record, vo);
			record.setUpdateTime(new Date());
			record.setModifier(vo.getUserId());
			systemDictMapper.updateByPrimaryKeySelective(record);
			
			//待优化 TODO
			ParamInit.updateDictCacheData();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("更新数据字典数据出错，{}",vo, e);
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}

	@Transactional
	@Override
	public ResponseResult<SystemDictVo> effectSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictBean record = new SystemDictBean();
			record.setId(vo.getId());
			record.setStatus(vo.getStatus());
			record.setUpdateTime(new Date());
			record.setModifier(vo.getUserId());
			systemDictMapper.updateByPrimaryKeySelective(record);
			
			//更新缓存 优化TODO
			ParamInit.updateDictCacheData();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("更新数据字典数据出错，{}",vo, e);
			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
		}
		return rspResult;
	}
	
//	@Override
//	public ResponseResult<SystemDictVo> modifyDelSystemDictById(String type, Long id) {
//		try {
//			int count = systemDictMapper.deleteByPrimaryKeyAndType(type, id);
//			if(count == 0){
//				return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
//			}else {
//				DictCacheUtil.remove(DictCacheUtil.getDictOfIdByType(type, id));
//				return new ResponseResult<SystemDictVo>(ResultEnum.SUCCESSE);
//			}
//		} catch (Exception e) {
//			logger.error("", e);
//			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//			return new ResponseResult<SystemDictVo>(ResultEnum.SYS_ERR);
//		}
//	}
	
	
//	@Override
//	public ResponseResult<List<Map<String,Object>>> getAllTypeMapList() {
//		return new ResponseResult<List<Map<String,Object>>>(systemDictMapper.getAllTypeMapList());
//	}
		
}
