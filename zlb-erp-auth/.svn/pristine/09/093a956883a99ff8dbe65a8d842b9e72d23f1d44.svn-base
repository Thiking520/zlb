package com.zhilianbao.erp.auth.impl.goods;


import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.zhilianbao.erp.auth.entity.goods.GoodsBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsCollectionBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsItemBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsOriginalBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsPropertyListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsSkuListBean;
import com.zhilianbao.erp.auth.entity.goods.GoodsTagListBean;
import com.zhilianbao.erp.auth.mapper.goods.GoodsCollectionMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsItemMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsOriginalMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsPropertyMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsSkuListMapper;
import com.zhilianbao.erp.auth.mapper.goods.GoodsTagListMapper;
import com.zhilianbao.erp.auth.service.goods.IGoodsService;
import com.zhilianbao.erp.auth.vo.goods.ErpOrderOriginalGoodsVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsItemVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsTagVo;
import com.zhilianbao.erp.auth.vo.goods.GoodsVo;
import com.zhilianbao.erp.auth.vo.goods.facade.ReqGoodsRestVo;
import com.zhilianbao.erp.auth.vo.goods.facade.RspGoodsRestVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.util.GenerateNo;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ViewSearchVo;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;
@Service
@Transactional
public class GoodsServiceImpl implements IGoodsService {
	
	private static Logger logger=LogManager.getLogger(GoodsServiceImpl.class);
	
	@Autowired
	private GoodsMapper goodsMapper;
	
	@Autowired
	private GoodsItemMapper goodsItemMapper;
	
	@Autowired
	GoodsCollectionMapper goodsCollectionMapper;
	
	@Autowired
	GoodsSkuListMapper goodsSkuListMapper;
	
	@Autowired
	GoodsOriginalMapper goodsOriginalMapper;
	
	@Autowired
	private GoodsTagListMapper goodsTagListMapper;
	@Autowired
	private GoodsPropertyMapper goodsPropertyMapper;
	@Autowired
	private GoodsPropertyListMapper goodsPropertyListMapper;
	
	public ResponseResult<Page<GoodsVo>> queryGoodsListByPage(ViewSearchVo vo) {
		ResponseResult<Page<GoodsVo>> rspResult = new ResponseResult<Page<GoodsVo>>();
		Page<GoodsVo> page = new Page<GoodsVo>();
		rspResult.setData(page);
		try {
			// 与mysql中的limit参数一致offset,limit
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); // 核心分页代码 开启分页查询，后面第一条查询语句会被分页
			// 注意:如果有两条查询语句，第二条不会被分页
			List<GoodsVo> list = goodsMapper.queryGoodsListByPage(vo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			PageInfo<GoodsVo> pageInfo = new PageInfo<GoodsVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			List<GoodsVo> goodsList = pageInfo.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(goodsList)) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
			page.setTotal(total);
			page.setRows(goodsList);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】分页查询出错",vo,e);
			return rspResult.err();
		}
	}
	
	@Override
	public ResponseResult<Page<GoodsVo>> queryGoodsListForCollection(ViewSearchVo vo) {
		ResponseResult<Page<GoodsVo>> rspResult = new ResponseResult<Page<GoodsVo>>();
		Page<GoodsVo> page = new Page<GoodsVo>();
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); 
			List<GoodsVo> list = goodsMapper.queryGoodsListForCollection(vo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			PageInfo<GoodsVo> pageInfo = new PageInfo<GoodsVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			List<GoodsVo> goodsList = pageInfo.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(goodsList)) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
			page.setTotal(total);
			page.setRows(goodsList);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("【组合商品页签-获取供选择的商品列表】分页查询出错",vo,e);
			return rspResult.err();
		}
	}

	@Override
	public ResponseResult<GoodsVo> queryGoodsDetails(GoodsVo searchGoodsVo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsVo goodsVo = goodsMapper.queryDetailsById(searchGoodsVo);
			rspResult.setData(goodsVo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】详情出错，id={}",searchGoodsVo.getId(), e);
			return rspResult.err();
		}
		return rspResult;
	}

	/**
	 * 获取商品编码，并判断在数据库中是否已经存在，存在则再次获取
	 * @param operatorId
	 * @return ：String
	 * @author ：chenll
	 * @date ：2017年4月22日 下午4:19:29
	 */
	private String getOnlyGoodsCode(Long operatorId){
		while(true){
			//统一生成商品编码
			String goodsCode = GenerateNo.generateInteriorNo("05", operatorId+"");
			//判断编码是否已经存在
			int count = goodsMapper.isExistsGoodsCode(goodsCode);
			if(count > 0)
				continue;
			return goodsCode;
		}
	}
	
	@Override
	public ResponseResult<GoodsVo> addGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsBean goodsBean = new GoodsBean();
			//先写主表t_goods
			PropertyUtils.copyProperties(goodsBean,vo);
			//设置商品编码
			goodsBean.setGoodsCode(getOnlyGoodsCode(goodsBean.getOperatorId()));
			goodsMapper.insertSelective(goodsBean);
			
			//再写商品标签中间表t_goods_tag_list
			List<GoodsTagVo> tagList = vo.getTagList();
			for (GoodsTagVo tagVo : tagList) {
				Long tagId = tagVo.getId();
				GoodsTagListBean tagListBean = new GoodsTagListBean();
				tagListBean.setGoodsId(goodsBean.getId());
				tagListBean.setTagId(tagId);
				goodsTagListMapper.insertSelective(tagListBean);
			}
			
			//商品属性中间表t_goods_property_list，商品必选属性
			if(vo.getGoodsMode() == 0 || vo.getGoodsMode() == 2){
				Example example = new Example(GoodsPropertyBean.class);
				Criteria criteria = example.createCriteria();
				criteria.andEqualTo("isMust", 1);
				List<GoodsPropertyBean> propertyList = goodsPropertyMapper.selectByExample(example);
				for(GoodsPropertyBean goodsPropertyBean : propertyList){
					GoodsPropertyListBean goodsPropertyListBean = new GoodsPropertyListBean();
					goodsPropertyListBean.setGoodsId(goodsBean.getId());
					goodsPropertyListBean.setPropertyId(goodsPropertyBean.getId());
					goodsPropertyListMapper.insertSelective(goodsPropertyListBean);
				}
			}
			//返回id到前端
			vo.setId(goodsBean.getId());
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】新增出错{}", vo, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> deleteGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			// 删除商品，判断有没有被引用
			Long [] deleteIds = new Long[1];//现在是单个删除，以后可能批量删除
			deleteIds[0] = vo.getId();
			if(deleteIds != null && deleteIds.length > 0){
				int count = goodsMapper.getCountByDeleteIds(deleteIds);
				if(count > 0)
					return rspResult.failure(ResultEnum.IN_USE);
			}
			GoodsBean goods = new GoodsBean();
			goods.setId(vo.getId());
			goods.setGoodsStatus(3);
			goodsMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】删除出错,id={}",vo.getId(), e);
			return rspResult.err();
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> updateGoodsStatus(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			GoodsBean goods = new GoodsBean();
			goods.setId(vo.getId());
			goods.setGoodsStatus(vo.getGoodsStatus());
			goodsMapper.updateByPrimaryKeySelective(goods);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】上架/下架出错{}",vo, e);
			return rspResult.err();
		}
		return rspResult;
	}

	@Override
	public ResponseResult<GoodsVo> updateGoods(GoodsVo vo) {
		ResponseResult<GoodsVo> rspResult = new ResponseResult<GoodsVo>();
		try {
			//先改主表t_goods
			GoodsBean goodsBean = new GoodsBean();
			PropertyUtils.copyProperties(goodsBean, vo);
			//根据id获取对象
			GoodsVo oldVo = goodsMapper.queryById(vo);
			//如果状态为已删除，修改后的状态为已下架
			if(oldVo.getGoodsStatus() == 3){
				goodsBean.setGoodsStatus(2);
			}
			goodsMapper.updateByPrimaryKeySelective(goodsBean);
			
			//再改商品标签中间表t_goods_tag_list，直接delete再insert
			Example example = new Example(GoodsTagListBean.class);
			Criteria criteria = example.createCriteria();    
			criteria.andEqualTo("goodsId", goodsBean.getId());
			goodsTagListMapper.deleteByExample(example);
			List<GoodsTagVo> tagList = vo.getTagList();
			if(tagList != null && tagList.size() > 0){
				for (GoodsTagVo tagVo : tagList) {
					Long tagId = tagVo.getId();
					GoodsTagListBean tagListBean = new GoodsTagListBean();
					tagListBean.setGoodsId(goodsBean.getId());
					tagListBean.setTagId(tagId);
					goodsTagListMapper.insertSelective(tagListBean);
				}
			}
			
			//返回id到前端
			vo.setId(goodsBean.getId());
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("【商品资料管理-基本信息】修改出错{}",vo, e);
			// 回滚
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
		return rspResult;
	}

	@Override
	public List<RspGoodsRestVo> mulGoodsInfo(ReqGoodsRestVo reqGoodVo) {
		List<RspGoodsRestVo> rspList = goodsMapper.mulGoodsInfo(reqGoodVo);
		return rspList;
	}
	
	public ResponseResult<Page<GoodsVo>> queryGoodsListPage(ViewSearchVo vo){
		ResponseResult<Page<GoodsVo>> rspResult = new ResponseResult<Page<GoodsVo>>();
		Page<GoodsVo> page = new Page<GoodsVo>();
		rspResult.setData(page);
		try {
			// 与mysql中的limit参数一致offset,limit
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize()); // 核心分页代码 开启分页查询，后面第一条查询语句会被分页
			// 注意:如果有两条查询语句，第二条不会被分页
			List<GoodsVo> list = goodsMapper.queryGoodsListPage(vo);
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			PageInfo<GoodsVo> pageInfo = new PageInfo<GoodsVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			List<GoodsVo> goodsList = pageInfo.getList();// 推荐使用这个获取结果集
			
			if (CollectionUtils.isEmpty(goodsList)) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
            //分页必填的两个参数
			page.setTotal(total);
			page.setRows(goodsList);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("【商品资料-基本信息】分页查询出错",vo,e);
			return rspResult.err();
		}
	}
	/**
	 * 将单品或者组合商品根据转换率以及所关联的原始商品转换为原始商品数量
	 * @param LeyaoOrdergoods：key 商品id（goodId），long 数量
	 * @return
	 */
	@Override
	public List<ErpOrderOriginalGoodsVo> convertGoodsToOriginalGoods(Map<String,BigDecimal> LeyaoOrdergoods){
		List<ErpOrderOriginalGoodsVo> erpOrderOriginals = Lists.newArrayList();
		for (String goodId : LeyaoOrdergoods.keySet()) {
			BigDecimal number = LeyaoOrdergoods.get(goodId);
			GoodsVo vo = new GoodsVo();
			vo.setId(Long.valueOf(goodId));
			GoodsVo goodsBean = goodsMapper.queryById(vo);
			//商品规格 0 单品 1 多规格商品 2 组合商品
			Integer goodsMode = goodsBean.getGoodsMode();
			
			if(goodsMode.intValue()==0){
				//单品
				GoodsItemVo goodsItemVo = new GoodsItemVo();
				goodsItemVo.setGoodsId(Long.valueOf(goodId));
				
				GoodsItemVo goodItem = goodsItemMapper.queryByGoodsId(goodsItemVo);
				Integer relateOriginalGoods = goodItem.getRelateOriginalGood();
				
				ErpOrderOriginalGoodsVo erpOrderOriginalGoodsVo = new ErpOrderOriginalGoodsVo();
				
				if(relateOriginalGoods!=null&&relateOriginalGoods.intValue()!=0){
					BigDecimal conversionRate = goodItem.getConversionRate();
					GoodsOriginalBean goodsOriginalBean = new GoodsOriginalBean();
					goodsOriginalBean.setId(Long.valueOf(relateOriginalGoods));
					goodsOriginalBean = goodsOriginalMapper.selectOne(goodsOriginalBean);
					
					//转换率，原始商品 数量 * 转换率 = 成品数量
					BigDecimal originalGoodsNum = number.divide(conversionRate,2, BigDecimal.ROUND_HALF_UP);
					
					//原始商品名称 
					erpOrderOriginalGoodsVo.setGoodsName(goodsOriginalBean.getGoodsName());
					//原始商品id
					erpOrderOriginalGoodsVo.setOriginalGoodsCode("O_"+relateOriginalGoods.toString());
					//原始商品数量
					erpOrderOriginalGoodsVo.setOriginalGoodsNum(originalGoodsNum);
				}else{
					//TODO 默认所有的售卖商品必须要关联对应的原始商品
					//原始商品名称 
//					erpOrderOriginalGoodsVo.setGoodsName(goodsBean.getTitle());
					//原始商品id
//					erpOrderOriginalGoodsVo.setOriginalGoodsCode("O_"+relateOriginalGoods.toString());
					//原始商品数量
//					erpOrderOriginalGoodsVo.setOriginalGoodsNum(originalGoodsNum);
				}
				erpOrderOriginals.add(erpOrderOriginalGoodsVo);
			}else if(goodsMode.intValue()==2){
				//组合商品
				Example example = new Example(GoodsCollectionBean.class);
				Example.Criteria criteria = example.createCriteria();
				criteria.andEqualTo("goodsId",goodId);
				List<GoodsCollectionBean> goodsCollectionBeans = goodsCollectionMapper.selectByExample(example);
				for (GoodsCollectionBean goodsCollectionBean : goodsCollectionBeans) {
					//外键 t_goods_item,包含的单品商品
					Long goodsId = goodsCollectionBean.getGoodsId();
					
					if(goodsId!=null&&goodsId.longValue()!=0l){
						//单品
						GoodsItemBean goodsItemBean = new GoodsItemBean();
						goodsItemBean.setGoodsId(Long.valueOf(goodId));
						GoodsItemBean goodItem = goodsItemMapper.selectOne(goodsItemBean);
						Integer relateOriginalGoods = goodItem.getRelateOriginalGood();
						ErpOrderOriginalGoodsVo erpOrderOriginalGoodsVo = new ErpOrderOriginalGoodsVo();
						
						BigDecimal conversionRate = goodItem.getConversionRate();
						GoodsOriginalBean goodsOriginalBean = new GoodsOriginalBean();
						goodsOriginalBean.setId(Long.valueOf(relateOriginalGoods));
						goodsOriginalBean = goodsOriginalMapper.selectOne(goodsOriginalBean);
						
						//转换率，原始商品 数量 * 转换率 = 成品数量
						BigDecimal originalGoodsNum = number.divide(conversionRate);
						
						//原始商品名称 
						erpOrderOriginalGoodsVo.setGoodsName(goodsOriginalBean.getGoodsName());
						//原始商品id
						erpOrderOriginalGoodsVo.setOriginalGoodsCode("O_"+relateOriginalGoods.toString());
						//原始商品数量
						erpOrderOriginalGoodsVo.setOriginalGoodsNum(originalGoodsNum);
						erpOrderOriginals.add(erpOrderOriginalGoodsVo);
						
					}else{
						//多规格品
						ErpOrderOriginalGoodsVo erpOrderOriginalGoodsVo = new ErpOrderOriginalGoodsVo();
						//外键 t_goods_sku_list,包含的sku商品信息
						Long goodsSkuId = goodsCollectionBean.getGoodsSkuId();
						
						//该商品是多规格商品,查询  t_goods_sku_list 表。
						GoodsSkuListBean goodsSkuList = goodsSkuListMapper.selectByPrimaryKey(goodsSkuId);
						//转换为原始商品
						erpOrderOriginalGoodsVo.setOriginalGoodsCode("O_"+goodsSkuList.getRelateOriginalGood().toString());
						erpOrderOriginalGoodsVo.setGoodsName(goodsBean.getTitle()+" "+goodsSkuList.getSkuSubtitle());
						BigDecimal conversionRate = goodsSkuList.getConversionRate();
						
						//转换率，原始商品 数量 * 转换率 = 成品数量
						BigDecimal divide = number.divide(conversionRate);
						erpOrderOriginalGoodsVo.setOriginalGoodsNum(divide);
						erpOrderOriginals.add(erpOrderOriginalGoodsVo);
					}
				}
			}
		}
		return erpOrderOriginals;
	}
}
