package com.zhilianbao.erp.auth.impl.parameter;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.parameter.SystemDictBean;
import com.zhilianbao.erp.auth.entity.parameter.SystemParamBean;
import com.zhilianbao.erp.auth.mapper.parameter.SystemDictMapper;
import com.zhilianbao.erp.auth.mapper.parameter.SystemParamMapper;
import com.zhilianbao.erp.auth.service.parameter.ISystemDictService;
import com.zhilianbao.erp.auth.utils.cache.DictCacheUtil;
import com.zhilianbao.erp.auth.utils.cache.ParamCacheUtil;
import com.zhilianbao.erp.auth.vo.parameter.SystemDictVo;
import com.zhilianbao.erp.auth.vo.parameter.rpc.DictVo;
import com.zhilianbao.erp.auth.vo.parameter.rpc.ParamVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.util.CollectionUtils;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ResponseValue;
import com.zhilianbao.erp.common.vo.ViewSearchVo;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

/**
 * 
 * @company zhilianbao
 * @author kuangzengye
 * @date   2017年3月11日下午3:43:15
 * @description:数据字典业务实现类
 */
@Service
public class SystemDictServiceImpl implements ISystemDictService {
	
	private static final Logger logger=LogManager.getLogger(SystemDictServiceImpl.class);
	
	private static List<SystemDictBean> systemDictBeanList=new ArrayList<SystemDictBean>();
	private static List<SystemParamBean> systemParaBeanList=new ArrayList<SystemParamBean>();
	
	@Autowired
	private SystemDictMapper systemDictMapper;
	@Autowired
	private SystemParamMapper systemParamMapper;
	
	@Override
	public ResponseResult<SystemDictVo> getSystemDictById(Long id) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictVo vo = new SystemDictVo();
			if(id == null){
				rspResult = rspResult.failure(ResultEnum.EMPTY);
				vo.setModifiable(0);
				rspResult.setData(vo);
				return rspResult;
			}
			SystemDictBean bean = systemDictMapper.selectByPrimaryKey(id);
			PropertyUtils.copyProperties(vo, bean);
			rspResult.setData(vo);
		} catch (Exception e) {
			logger.error("通过Id查询系统数据字典数据出错！{}",id,e);
			return rspResult.err();
		}
		return rspResult;		
	}
	
	@Override
	public ResponseResult<Page<SystemDictVo>> getPageByVo(ViewSearchVo vo) {
		ResponseResult<Page<SystemDictVo>> rspResult = new ResponseResult<Page<SystemDictVo>>();
		Page<SystemDictVo> page = new Page<SystemDictVo>();
		rspResult.setData(page);
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize());
			List<SystemDictVo> list = systemDictMapper.getPageByVo(vo);
			
			if (Constants.ZERO == list.size()) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			PageInfo<SystemDictVo> pageInfo = new PageInfo<SystemDictVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			if (Constants.ZERO == total) {
				return rspResult.failure(ResultEnum.EMPTY);
			}
			convertList(vo.getOperatorId(),list);
			page.setTotal(total);
			page.setRows(list);
			return rspResult.success(page);
		} catch (Exception e) {
			logger.error("分页查询数据字典数据出错", e);
			return rspResult.err();
		}
	}

	/**
	 * 
	* @author kuangzengye
	* @date 2017年3月22日下午1:46:43
	* @param operatorId,list
	* @return List<ResponseOrderVo>
	* @description:查询结果集数据转换
	 */
	private List<SystemDictVo> convertList(Long operatorId,List<SystemDictVo> list) {

		//通过运营商ID和字典类型获取字典list
		List<DictVo> modifiableList = getDictList(operatorId,Constants.TYPE_COMMON_MODIFIABLE).getData();
		List<DictVo> statusList = getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();

		for (SystemDictVo vo : list) {
			//转换可否修改状态
			for (DictVo dict : modifiableList) {
				if(StringUtils.equalsIgnoreCase(String.valueOf(vo.getModifiable()), dict.getDictValue())){
					vo.setModifiableStr(dict.getDictDesc());
				}
			}
		}
		for (SystemDictVo vo : list) {
			//转换生效失效状态
			for (DictVo dict : statusList) {
				if(StringUtils.equalsIgnoreCase(String.valueOf(vo.getStatus()), dict.getDictValue())){
					vo.setStatusStr(dict.getDictDesc());
				}
			}
		}
		return list;
	}
	
	@Override
	public ResponseResult<SystemDictVo> addOrModifySystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			//参数非空校验
			if(!StringUtils.isNoneBlank(vo.getDictTitle(),vo.getDictType(),vo.getDictValue(),
			   String.valueOf(vo.getStatus()),vo.getDictDesc(),String.valueOf(vo.getDictOrder()),
			   vo.getOperatorId() + "")){
				return rspResult.failure(ResultEnum.ILLEGAL_PARAM); 
			}
			
			SystemDictBean bean = new SystemDictBean();
			PropertyUtils.copyProperties(bean, vo);
			
			int count = 0;
			if(bean.getId() == null){//添加
				
				//检验新增的值是否重复 数据字典通过类型key和value判断唯一
				SystemDictBean queryBean = new SystemDictBean();
				queryBean.setDictType(vo.getDictType());
				queryBean.setDictValue(vo.getDictValue());
				queryBean.setOperatorId(vo.getOperatorId());
				SystemDictBean isRepeat = systemDictMapper.selectOne(queryBean);
				if(isRepeat != null){
					return rspResult.failure(ResultEnum.DATA_REPEAT);
				}
				bean.setCreateTime(new Date());
				bean.setCreator(vo.getUserId());
				bean.setUpdateTime(bean.getCreateTime());
				bean.setModifier(bean.getCreator());
				count = systemDictMapper.insertSelective(bean);
				
			} else { //更新
				bean.setUpdateTime(new Date());
				bean.setModifier(vo.getUserId());
				//通过运营商ID跟ID查询数据  检验运营商操作
				SystemDictBean queryBean = new SystemDictBean();
				queryBean.setId(vo.getId());
				queryBean.setOperatorId(vo.getOperatorId());
				SystemDictBean isLegal = systemDictMapper.selectOne(queryBean);
				if(isLegal != null){
					if(isLegal.getModifiable() == 0){//后台校验不可修改项
						return rspResult.failure(ResultEnum.DATA_NOT_MODIFIABLE);
					}
					count = systemDictMapper.updateByPrimaryKeySelective(bean);
				}else{
					return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
				}
			}
			
			if(count == 1){				
				//更新缓存
				DictVo dict = new DictVo();
				PropertyUtils.copyProperties(dict, vo);
				//如果是生效的 更新缓存 如果是失效 不再添加到缓存
				//生效 添加到缓存
				if(vo.getStatus() == 1){
					DictCacheUtil.updateCacheData(dict);
				//失效 从缓存删除
				}else{
					DictCacheUtil.remove(dict);
				}
				return rspResult.success();
			}else{
				return rspResult.err();
			}
		} catch (Exception e) {
			logger.error("", e);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			return rspResult.err();
		}
	}
	
	@Override
	@Deprecated
	public ResponseResult<SystemDictVo> addSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictBean record = new SystemDictBean();
			PropertyUtils.copyProperties(record, vo);
			record.setCreateTime(new Date());
			record.setCreator(vo.getUserId());
			record.setUpdateTime(record.getCreateTime());
			record.setModifier(record.getCreator());
			systemDictMapper.insertSelective(record);
			//待优化 TODO
			ParamInit.updateDictCacheData();
			return rspResult.success();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("新增数据字典数据出错,{}",vo, e);
			return rspResult.err();
		}
	}

	@Override
	@Deprecated
	public ResponseResult<SystemDictVo> updateSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			SystemDictBean record = new SystemDictBean();
			PropertyUtils.copyProperties(record, vo);
			record.setUpdateTime(new Date());
			record.setModifier(vo.getUserId());
			systemDictMapper.updateByPrimaryKeySelective(record);
			
			//待优化 TODO
			ParamInit.updateDictCacheData();
			return rspResult.success();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("更新数据字典数据出错，{}",vo, e);
			return rspResult.err();
		}
	}

	@Transactional
	@Override
	public ResponseResult<SystemDictVo> effectSystemDict(SystemDictVo vo) {
		ResponseResult<SystemDictVo> rspResult = new ResponseResult<SystemDictVo>();
		try {
			Integer status = vo.getStatus();
			if(status == null){
				return rspResult.failure(ResultEnum.ILLEGAL_PARAM);
			}
			SystemDictBean record = new SystemDictBean();
			record.setId(vo.getId());
			record.setStatus(vo.getStatus());
			record.setUpdateTime(new Date());
			record.setModifier(vo.getUserId());
			
			int count = 0;
			//通过运营商ID跟ID查询数据  检验运营商操作
			SystemDictBean queryBean = new SystemDictBean();
			queryBean.setId(vo.getId());
			queryBean.setOperatorId(vo.getOperatorId());
			SystemDictBean isLegal = systemDictMapper.selectOne(queryBean);
			if(isLegal != null){
				count = systemDictMapper.updateByPrimaryKeySelective(record);
			}else{
				return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
			}
			
			if(count != 1){
				return rspResult.failure(ResultEnum.ILLEGAL_ACCESS);
			}
			//缓存操作
//			record = systemDictMapper.selectByPrimaryKey(vo.getId());
			record = isLegal;
			DictVo dict = new DictVo();
			PropertyUtils.copyProperties(dict, record);
			//生效 添加到缓存
			if(vo.getStatus() == 1){
				DictCacheUtil.updateCacheData(dict);
			//失效 从缓存删除
			}else{
				DictCacheUtil.remove(dict);
			}
			
			return rspResult.success();
		} catch (Exception e) {
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
			logger.error("更新数据字典数据出错，{}",vo, e);
			return rspResult.err();
		}
	}
	
	@Override
	public ResponseValue<String> addOperatorBaseDict(long operatorId,long creator,long modifier){
		ResponseValue<String> responseValue=new ResponseValue<String>();
		try{
			//字典
			if(systemDictBeanList == null || systemDictBeanList.size()<=0){
				Example example=new Example(SystemDictBean.class);
			    Criteria criteria = example.createCriteria();
			    criteria.andEqualTo("operatorId", 0);
				
			    systemDictBeanList=systemDictMapper.selectByExample(example);
			}
			
			if(systemDictBeanList == null || systemDictBeanList.size()<=0){
				return responseValue.failure("没有字典基础数据配置");
			}
			//参数
			if(systemParaBeanList == null || systemParaBeanList.size()<=0){
				Example example=new Example(SystemParamBean.class);
			    Criteria criteria = example.createCriteria();
			    criteria.andEqualTo("operatorId", 0);
				
			    systemParaBeanList=systemParamMapper.selectByExample(example);
			}
			
			if(systemParaBeanList == null || systemParaBeanList.size()<=0){
				return responseValue.failure("没有参数基础数据配置");
			}
			
			//字典
			DictVo dictBean=null;
			List<DictVo> dictBeanList = new ArrayList<DictVo>();
			for(SystemDictBean systemDictBean:systemDictBeanList){
				systemDictBean.setOperatorId(operatorId);
				systemDictBean.setCreator(creator);
				systemDictBean.setModifier(modifier);
				
				dictBean=new DictVo();
				PropertyUtils.copyProperties(dictBean, systemDictBean);
				dictBeanList.add(dictBean);
			}
			//参数
			ParamVo paramBean=null;
			List<ParamVo> paramBeanList = new ArrayList<ParamVo>();
			for(SystemParamBean systemParamBean:systemParaBeanList){
				systemParamBean.setOperatorId(operatorId);
				systemParamBean.setCreator(creator);
				systemParamBean.setModifier(modifier);
				
				paramBean=new ParamVo();
				PropertyUtils.copyProperties(paramBean, systemParamBean);
				paramBeanList.add(paramBean);
			}
			
			int num=systemDictMapper.insertBatchOperatorDict(systemDictBeanList);
			if(num != systemDictBeanList.size()){
				return responseValue.failureRollback("初始运营商基础数据失败");
	        } 
			
			int paraNum=systemParamMapper.insertBatchOperatorPara(systemParaBeanList);
			if(paraNum != systemParaBeanList.size()){
				return responseValue.failureRollback("初始运营商参数基础数据失败");
			}
			
			
			DictCacheUtil.updateCacheData(dictBeanList);
			ParamCacheUtil.updateCacheData(paramBeanList);
		}catch (Exception e) {
			logger.error("SystemDictServiceImpl,addOperatorBaseDict", e);
			return responseValue.errRollback();
		}
		
	    return responseValue.success();
	}
	
//	@Override
//	public ResponseResult<SystemDictVo> modifyDelSystemDictById(String type, Long id) {
//		try {
//			int count = systemDictMapper.deleteByPrimaryKeyAndType(type, id);
//			if(count == 0){
//				return rspResult.err();
//			}else {
//				DictCacheUtil.remove(DictCacheUtil.getDictOfIdByType(type, id));
//				return rspResult.failure(ResultEnum.SUCCESSE);
//			}
//		} catch (Exception e) {
//			logger.error("", e);
//			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
//			return rspResult.err();
//		}
//	}
	
	
//	@Override
//	public ResponseResult<List<Map<String,Object>>> getAllTypeMapList() {
//		return new ResponseResult<List<Map<String,Object>>>(systemDictMapper.getAllTypeMapList());
//	}
	
	@Override
	public ResponseResult<List<DictVo>> getDictList(Long operatorId,String dictType) {
		logger.info("接收到获取数据字典请求参数，operatorId={},dictType={}",operatorId,dictType);
		ResponseResult<List<DictVo>> rspResult = new ResponseResult<List<DictVo>>();
		//参数检查
		if(operatorId == null){
			return rspResult.failure(ResultEnum.OPERATOR__NULL);
		}
		if(StringUtils.isEmpty(dictType)){
			return rspResult.failure(ResultEnum.PARAM_KEY_NULL);
		}
		List<DictVo> dictVoList = null;
		try{
			List<DictVo> redisList = DictCacheUtil.get(operatorId, dictType);
			if(redisList != null){//如果redis中有直接返回
				rspResult.setData(redisList);
				logger.info("【redis】响应获取数据字典，rspResult:{}", JSON.toJSONString(rspResult));
				return rspResult;
			}
			//如果redis中没有，从数据库中获取
			SystemDictBean queryBean = new SystemDictBean();
			queryBean.setOperatorId(operatorId);
			queryBean.setDictType(dictType);
			queryBean.setStatus(1);
			List<SystemDictBean> dictList = systemDictMapper.select(queryBean);

			if(CollectionUtils.isNotEmpty(dictList)){
				dictVoList = new ArrayList<DictVo>();
				for (SystemDictBean systemDictBean : dictList) {
					DictVo vo = new DictVo();
					PropertyUtils.copyProperties(vo, systemDictBean);
					dictVoList.add(vo);
				}
			}
			rspResult.setData(dictVoList);
		}catch (Exception e) {
			logger.error("获取数据字典数据出错，operatorId={},dictType={}",operatorId,dictType, e);
			return rspResult.err();
		}
		try {
			//保存数据到redis
			DictCacheUtil.updateCacheData(dictVoList);
		}catch (Exception e){
			logger.warn("保存redis数据字典数据出错，operatorId={},dictType={},dictList:{}",operatorId,dictType,dictVoList, e);
		}
		logger.info("响应获取数据字典，rspResult:{}", JSON.toJSONString(rspResult));
		return rspResult;
	}
	
	@Override
	public ResponseResult<String> getDescOfValueByType(Long operatorId, String dictType, String value){
		logger.info("接收到获取数据字典请求参数，[operatorId={},dictType={},value={}]",operatorId,dictType,value);
		ResponseResult<String> rspResult = new ResponseResult<String>();
		//参数检查
		if(operatorId == null){
			return rspResult.failure(ResultEnum.OPERATOR__NULL);
		}
		if(StringUtils.isEmpty(dictType)){
			return rspResult.failure(ResultEnum.PARAM_KEY_NULL);
		}
		if(StringUtils.isEmpty(value)){
			return rspResult.failure(ResultEnum.PARAM_VALUE_NULL);
		}
		SystemDictBean dictBean;
		try{
			String desc = DictCacheUtil.getDescOfValueByType(operatorId,dictType,value);
			if(desc != null){//如果redis中有直接返回
				rspResult.setData(desc);
				logger.info("【redis】响应获取数据字典，rspResult:{}", JSON.toJSONString(rspResult));
				return rspResult;
			}
			//如果redis中没有，从数据库中获取
			SystemDictBean queryBean = new SystemDictBean();
			queryBean.setOperatorId(operatorId);
			queryBean.setDictType(dictType);
			queryBean.setDictValue(value);
			queryBean.setStatus(1);
			dictBean = systemDictMapper.selectOne(queryBean);
			if(dictBean == null){
				return rspResult.failure(ResultEnum.EMPTY);
			}
			rspResult.setData(dictBean.getDictDesc());
		}catch (Exception e) {
			logger.error("获取数据字典数据出错，[operatorId={},dictType={},value={}]",operatorId,dictType,value, e);
			return rspResult.err();
		}
		//保存数据到redis
		DictVo dictVo = new DictVo();
		try {
			PropertyUtils.copyProperties(dictVo,dictBean);
			DictCacheUtil.updateCacheData(dictVo);
		}catch (Exception e){
			logger.warn("保存redis数据字典数据出错，dictVo:{}",JSON.toJSONString(dictVo), e);
		}
		logger.info("响应获取数据字典单个描述，rspResult:{}", JSON.toJSONString(rspResult));
		return rspResult;
	}
	
	@Override
	public ResponseResult<Map<String, Object>> initDropDownBox(Long operatorId) {
		ResponseResult<Map<String, Object>> rspResult = new ResponseResult<Map<String, Object>>();
		try {
			// 通过运营商ID和字典类型获取字典list
			//通过运营商ID和字典类型获取字典list
			List<DictVo> statusList = getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();//从缓存获取通用的生效/失效list
			Map<String, Object> result = new HashMap<String, Object>();
			result.put("statusList", statusList);
			logger.debug(JSON.toJSONString(result));
			rspResult.setData(result);
		} catch (Exception e) {
			logger.error("初始化下拉框数据出错！", e);
			return rspResult.err();
		}
		return rspResult;
	}
	
	@Override
	public ResponseResult<Map<String, Object>> getToDropDownBox(Long operatorId,SystemDictVo vo) {
		ResponseResult<Map<String, Object>> rspResult = new ResponseResult<Map<String, Object>>();
		try {
			//通过运营商ID和字典类型获取字典list
			List<DictVo> statusList = getDictList(operatorId,Constants.TYPE_COMMON_ACTIVE).getData();//从缓存获取通用的生效/失效list
			List<DictVo> modifiableList = DictCacheUtil.get(operatorId,Constants.TYPE_COMMON_MODIFIABLE);//从缓存获取通用的生效/失效list

			Map<String, Object> result = new HashMap<String, Object>();
			result.put("statusList", statusList);
			result.put("modifiableList", modifiableList);
			result.put("vo", vo);
			logger.debug(JSON.toJSONString(result));
			rspResult.setData(result);
		} catch (Exception e) {
			logger.error("获取下拉框数据出错！", e);
			return rspResult.err();
		}
		return rspResult;
	}
}
