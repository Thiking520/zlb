package com.zhilianbao.erp.auth.impl.archives;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.archives.DeliveryScopeBean;
import com.zhilianbao.erp.auth.mapper.archives.DeliveryScopeMapper;
import com.zhilianbao.erp.auth.service.archives.IDeliveryScopeService;
import com.zhilianbao.erp.auth.vo.archives.DeliveryScopeSearchVo;
import com.zhilianbao.erp.auth.vo.archives.DeliveryScopeVo;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;

/**
 * 
 * @author wangshengxia
 *
 */
@Service
public class DeliveryScopeServiceImpl implements IDeliveryScopeService{
	
	private static Logger logger = LogManager.getLogger(DeliveryScopeServiceImpl.class);
	@Autowired
	private DeliveryScopeMapper deliveryScopeMapper;
	@Override
	public ResponseResult<Page<DeliveryScopeVo>> queryDeliveryScope(DeliveryScopeSearchVo vo) {
		ResponseResult<Page<DeliveryScopeVo>> respResult = new ResponseResult<Page<DeliveryScopeVo>>();
		Page<DeliveryScopeVo> page = new Page<DeliveryScopeVo>();
		try {
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize());
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("vo", vo);
			List<DeliveryScopeVo> list = deliveryScopeMapper.queryDeliveryScopes(map);
			PageInfo<DeliveryScopeVo> pageInfo = new PageInfo<DeliveryScopeVo>(list);
			long total = pageInfo.getTotal();// 获取数据库中的总条数
			List<DeliveryScopeVo> dsList = pageInfo.getList();// 推荐使用这个获取结果集

			page.setTotal(total);
			page.setRows(dsList);
			return respResult.success(page);
		} catch (Exception e) {
			logger.error("通过条件查询站点范围列表出错!id={}", vo, e);
			return respResult.err();
		}
	}
	@Override
	public ResponseResult<DeliveryScopeVo> queryDeliveryScopeDetails(DeliveryScopeVo vo) {
		ResponseResult<DeliveryScopeVo> respResult=new ResponseResult<DeliveryScopeVo>();
		try{
			DeliveryScopeBean ds=new DeliveryScopeBean();
			ds.setId(vo.getId());
			DeliveryScopeVo cb=deliveryScopeMapper.queryDeliveryScopeDetails(ds);
			respResult.setData(cb);
		}catch(Exception e){
			logger.error("通过ID查询站点范围详情出错!id={}",vo.getId(), e);
			return new ResponseResult<DeliveryScopeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}
	@Override
	public ResponseResult<DeliveryScopeVo> updateDeliveryScopeStatus(DeliveryScopeVo vo) {
		ResponseResult<DeliveryScopeVo> respResult=new ResponseResult<DeliveryScopeVo>();
		try{
			DeliveryScopeBean ds=new DeliveryScopeBean();
			ds.setId(vo.getId());
			ds.setIsDelivery(vo.getIsDelivery());
			ds.setUpdateTime(new Date());
			deliveryScopeMapper.updateByPrimaryKeySelective(ds);
		}catch(Exception e){
			logger.error("通过ID更新站点范围数据出错!id={}",vo.getId(), e);
			return new ResponseResult<DeliveryScopeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}
	@Override
	public ResponseResult<DeliveryScopeVo> updateDeliveryScope(DeliveryScopeVo vo) {
		ResponseResult<DeliveryScopeVo> respResult=new ResponseResult<DeliveryScopeVo>();
		try{
			DeliveryScopeBean ds=new DeliveryScopeBean();
			PropertyUtils.copyProperties(ds, vo);
			ds.setUpdateTime(new Date());
			ds.setDeliveryRecordType(null);
			deliveryScopeMapper.updateByPrimaryKeySelective(ds);
		}catch(Exception e){
			logger.error("通过ID更新站点范围数据出错!id={}",vo.getId(), e);
			return new ResponseResult<DeliveryScopeVo>(ResultEnum.SYS_ERR);
		}
		
		return respResult;
	}
	@Override
	public ResponseResult<DeliveryScopeVo> deleteDeliveryScope(DeliveryScopeVo vo) {
		ResponseResult<DeliveryScopeVo> respResult=new ResponseResult<DeliveryScopeVo>();
		try{
			DeliveryScopeBean ds=new DeliveryScopeBean();
			ds.setId(vo.getId());
			ds.setDeleted(true);
			ds.setUpdateTime(new Date());
			deliveryScopeMapper.updateByPrimaryKeySelective(ds);
		}catch(Exception e){
			logger.error("通过ID删除站点范围数据出错!id={}",vo.getId(), e);
			return new ResponseResult<DeliveryScopeVo>(ResultEnum.SYS_ERR);
		}
		
		
		return respResult;
	}
	@Override
	public ResponseResult<DeliveryScopeVo> addDeliveryScope(DeliveryScopeVo vo) {
		ResponseResult<DeliveryScopeVo> respResult=new ResponseResult<DeliveryScopeVo>();
		DeliveryScopeBean dsBean=new DeliveryScopeBean();
		try{
			PropertyUtils.copyProperties(dsBean, vo);
			dsBean.setOperatorId(1L);
			dsBean.setId(null);
			//定义站点范围Bean
			/**
			 * 1.先根据省查且其他市，区，街为空
			 * 2.如果条件市不为空，则根据省，市查询 ，区，街，为空
			 * 3.如果条件区不为空，根据省，市，区查询，街为空
			 * 4，如果条件街不为空，根据省，市，区，街查询
			 */
			DeliveryScopeBean dsBean2=new DeliveryScopeBean();
			dsBean2.setIsDelivery(dsBean.getIsDelivery());
			dsBean2.setProvince(dsBean.getProvince());
			dsBean2.setCity(dsBean.getCity());
			dsBean2.setArea(dsBean.getArea());
			dsBean2.setStreet(dsBean.getStreet());
			dsBean2.setDeliveryRecordType(dsBean.getDeliveryRecordType());
			List<DeliveryScopeVo> dslist = deliveryScopeMapper.queryDeliveryRecordByPCAS2(dsBean2);
			for (int i = 0; i < dslist.size(); i++) {//判断当前插入的行政区域在数据库是否有比当前区域更小的范围
				if(dslist.get(i).getProvince()!=null && (dsBean2.getProvince() == null || dsBean2.getProvince().equals(""))){
					return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
				}else if(dslist.get(i).getCity()!=null && (dsBean2.getCity() == null || dsBean2.getCity().equals(""))){
					return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
				}else if(dslist.get(i).getArea()!=null && (dsBean2.getArea() == null || dsBean2.getArea().equals(""))){
					return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
				}else if(dslist.get(i).getStreet()!=null && (dsBean2.getStreet() == null || dsBean2.getStreet().equals(""))){
					return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
				}
			}
			DeliveryScopeBean dsBean1=new DeliveryScopeBean();
			dsBean1.setIsDelivery(dsBean.getIsDelivery());
			dsBean1.setName(dsBean.getName());
			dsBean1.setProvince(dsBean.getProvince());
			dsBean1.setCity(null);
			dsBean1.setArea(null);
			dsBean1.setStreet(null);
			dsBean1.setDeliveryRecordType(dsBean.getDeliveryRecordType());
			int i1=deliveryScopeMapper.queryDeliveryRecordByPCAS(dsBean1);
			if(i1>0){
				return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
			}else if(dsBean.getCity()!= null && !dsBean.getCity().equals("")){
				dsBean1.setCity(dsBean.getCity());
				int i2=deliveryScopeMapper.queryDeliveryRecordByPCAS(dsBean1);
				if(i2>0){
					return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
				}else if(dsBean.getArea() != null && !dsBean.getCity().equals("")){
					dsBean1.setArea(dsBean.getArea());
					int i3=deliveryScopeMapper.queryDeliveryRecordByPCAS(dsBean1);
					if(i3>0){
						return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
					}else if(dsBean.getStreet() != null && !dsBean.getStreet().equals("")){
						dsBean1.setStreet(dsBean.getStreet());
						int i4=deliveryScopeMapper.queryDeliveryRecordByPCAS(dsBean1);
						if(i4>0){
							return new ResponseResult<DeliveryScopeVo>(ResultEnum.DATA_REPEAT);
						}
					}
				}
			}
			dsBean.setDeliveryRecordType(null);
			deliveryScopeMapper.insertSelective(dsBean);
		}catch(Exception e){
			logger.error("添加站点范围数据出错!",dsBean, e);
			return new ResponseResult<DeliveryScopeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}
 
}
 