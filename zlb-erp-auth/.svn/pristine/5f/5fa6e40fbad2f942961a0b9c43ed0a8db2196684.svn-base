package com.zhilianbao.erp.auth.impl.operators;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.user.OperatorCompanyBean;
import com.zhilianbao.erp.auth.entity.user.RoleBean;
import com.zhilianbao.erp.auth.entity.user.RoleMenuListBean;
import com.zhilianbao.erp.auth.entity.user.UserRoleListBean;
import com.zhilianbao.erp.auth.mapper.operators.OperatorMapper;
import com.zhilianbao.erp.auth.mapper.user.MenuMapper;
import com.zhilianbao.erp.auth.mapper.user.RoleMapper;
import com.zhilianbao.erp.auth.mapper.user.RoleMenuListMapper;
import com.zhilianbao.erp.auth.mapper.user.UserMapper;
import com.zhilianbao.erp.auth.mapper.user.UserRoleListMapper;
import com.zhilianbao.erp.auth.service.operators.IOperatorService;
import com.zhilianbao.erp.auth.service.parameter.ISystemDictService;
import com.zhilianbao.erp.auth.vo.operators.OperatorVo;
import com.zhilianbao.erp.auth.vo.operators.ParaOperatorVo;
import com.zhilianbao.erp.auth.vo.user.MenuVo;
import com.zhilianbao.erp.auth.vo.user.RoleMenuListVo;
import com.zhilianbao.erp.auth.vo.user.UserRoleListVo;
import com.zhilianbao.erp.auth.vo.user.UserVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.vo.Page;
import com.zhilianbao.erp.common.vo.ResponseResult;
import com.zhilianbao.erp.common.vo.ResponseValue;
import com.zhilianbao.erp.common.vo.StatusVo;
import com.zhilianbao.erp.oms.facade.IHttpOrderRestService;

import tk.mybatis.mapper.entity.Example;
import tk.mybatis.mapper.entity.Example.Criteria;

@Service
public class OperatorServiceImpl implements IOperatorService {
	private Logger logger = LogManager.getLogger(OperatorServiceImpl.class);
	@Autowired
	private OperatorMapper operatorMapper;
	@Autowired
	private ISystemDictService systemDictService;
	
	@Reference
	private IHttpOrderRestService httpOrderRestService;
	
	@Autowired
	private UserMapper userMapper;
	
	@Autowired
	private UserRoleListMapper userRoleMappper;
	
	@Autowired
	private RoleMapper roleMapper;
	
	@Autowired
	private MenuMapper menuMapper;
	
	@Autowired
	private RoleMenuListMapper rmlMapper;

	@Override
	public ResponseValue<Page<OperatorVo>> qryOperator(ParaOperatorVo paraOperatorVo) {
		ResponseValue<Page<OperatorVo>> responseValue=new ResponseValue<Page<OperatorVo>>();
		Page<OperatorVo> page=new Page<OperatorVo>();
		
		PageHelper.offsetPage(paraOperatorVo.getViewSearchVo().getOffset(),
				paraOperatorVo.getViewSearchVo().getPageSize());
		PageInfo<OperatorVo> pageInfo=null;
		
		paraOperatorVo.setDictType(Constants.TYPE_COMMON_ACTIVE);//关联数据字典类型参数
		try {
			if(paraOperatorVo.getUserType() == 0) {
				paraOperatorVo.setOperatorId(null);
			}
			pageInfo=operatorMapper.qryOperator(paraOperatorVo);
			
		} catch (Exception e) {
			logger.error("OperatorServiceImpl,qryOperator",e);
			return responseValue.err();
		}
		
		List<OperatorVo> operatorList=pageInfo.getList();
		page.setTotal(pageInfo.getTotal());
		page.setRows(operatorList);
		return responseValue.success(page);
	}

	@Override
	public ResponseValue<String> addOperator(OperatorVo operatorVo) {
		ResponseValue<String> responseValue=new ResponseValue<String>();
		OperatorCompanyBean operatorCompanyBean = new OperatorCompanyBean();
		try {
			operatorCompanyBean.setCompanyKey(operatorVo.getCompanyKey());
			OperatorCompanyBean keyBean = operatorMapper.selectOne(operatorCompanyBean);
			if(keyBean != null){
				return responseValue.failure("key值存在！");
			}
			
			operatorCompanyBean.setCompanyKey(operatorVo.getCompanyKey());
			OperatorCompanyBean codeBean = operatorMapper.selectOne(operatorCompanyBean);
			if(codeBean != null){
				return responseValue.failure("编码存在！");
			}
			
			PropertyUtils.copyProperties(operatorCompanyBean, operatorVo);
			
			operatorCompanyBean.setId(null);
			int num=operatorMapper.insertSelective(operatorCompanyBean);
			if(num<1){
				return responseValue.failure();
			}
			
			//调用初始运营商数据
			long companyKey=operatorCompanyBean.getCompanyKey();
			long creator=operatorCompanyBean.getCreator();
			long modifier=operatorCompanyBean.getModifier();
			ResponseValue<String> dictResponseValue=systemDictService.addOperatorBaseDict(companyKey, creator, modifier);
			String dictCode = dictResponseValue.getCode();
			if (!Constants.CODE_SUCCESS.equals(dictCode)) {
				return responseValue.failureRollback();
			}
			
			//20170531 by Shilijin start=======================================
			operatorVo.setOperatorId(companyKey);
			//第五步，运维得到运营商角色，使得右上角有数据
			//1、查找本系统中所有运维(超级管理员)
			List<UserVo> userList = userMapper.findAllSuperAdmins();
			int roleCount = 0;//新建角色计数器，角色只创建一次
			long roleId = 0;
			if(userList.size() > 0) {
				//遍历每一个运维，如果没有该运营商下的角色，则添加
				for (UserVo userVo2 : userList) {
					int count = 0;//计数器，角色只加一次
					//查找是否拥有该运营商下的角色
					UserRoleListVo urlVo = new UserRoleListVo();
					urlVo.setOperatorId(operatorVo.getOperatorId());
					urlVo.setAdminId(userVo2.getCenterId());
					List<UserRoleListVo> userRoleList = userRoleMappper.ownRoleByOperatorId(urlVo);
					if(userRoleList.size() == 0) {
						//2017-04-21 19:33
						//说明该运维没有该运营商下的任何角色，则加入该角色，新增一个该运营商下的超管
						RoleBean roleBean = new RoleBean();
						if(count == 0) {
							if(roleCount == 0) {
								roleBean.setCreateTime(new Date());
								roleBean.setCreator(operatorVo.getUserId());
								roleBean.setDeleted(false);
								roleBean.setEnabled(true);
								roleBean.setOperatorId(operatorVo.getOperatorId());
								roleBean.setRoleDescription("运营商创建时系统自动创建的超级管理员，拥有所有权限");
								roleBean.setRoleName("运营超级管理员(系统内置)");
								roleBean.setUniquekey(new Date().getTime() + "");
								roleBean.setIsdisabledel(true);
								roleBean.setIsdisableedit(true);
								roleBean.setIssuperadmin(true);
								roleMapper.insert(roleBean);
								//角色编号处理
								StringBuffer sb = new StringBuffer();
								roleId = roleBean.getId();
								if((roleId+"").length() < 6) {
									for(int i=0;i<6-(roleId+"").length();i++) {
										sb.append("0");
									}
								}
								roleBean.setUniquekey("RO"+sb.toString()+roleId);
								roleMapper.updateByPrimaryKeySelective(roleBean);
								roleCount++;
							}
							
							//角色赋权
							//查找所有菜单
							//List<RoleMenuListVo> list = new ArrayList<RoleMenuListVo>();
							List<MenuVo> menuList = menuMapper.findAll(new RoleMenuListVo());
							//这里应该修改成批量插入？？？？？
							if(menuList != null && menuList.size() > 0) {
								for (MenuVo menuVo : menuList) {
									RoleMenuListVo rmlvo = new RoleMenuListVo();
									rmlvo.setCreator(operatorVo.getUserId());
									rmlvo.setCreateTime(new Date());
									rmlvo.setDeleted(false);
									rmlvo.setMenuId(menuVo.getId());
									rmlvo.setOperatorId(operatorVo.getOperatorId());
									rmlvo.setRoleId(roleId);
									RoleMenuListBean rmlb = new RoleMenuListBean();
									PropertyUtils.copyProperties(rmlb, rmlvo);
									rmlMapper.insertSelective(rmlb);
									//list.add(rmlvo);
								}
							}
							UserRoleListBean bean = new UserRoleListBean();
							bean.setAdminId(userVo2.getCenterId());
							bean.setCreateTime(new Date());
							bean.setCreator(operatorVo.getUserId());
							bean.setDeleted(false);
							bean.setRoleId(roleId);
							userRoleMappper.insertSelective(bean);
						}
						count++;
					}
				}
			}
			
			
			
			//20170531 by Shilijin end==========================================
		} catch (Exception e) {
			logger.error("OperatorServiceImpl,addOperator",e);
			return responseValue.errRollback();
		} 
		
		return responseValue.success();
	}

	@Override
	public ResponseValue<OperatorVo> loadOperatorUpdate(OperatorVo operatorVo) {
		ResponseValue<OperatorVo> responseValue=new ResponseValue<OperatorVo>();
		try{
		    OperatorCompanyBean operatorCompanyBean=operatorMapper.selectByPrimaryKey(operatorVo.getId());
			if(operatorCompanyBean != null){
				PropertyUtils.copyProperties(operatorVo, operatorCompanyBean);
			}
		}catch (Exception e){
			logger.error("OperatorServiceImpl,loadOperatorUpdate",e);
			return responseValue.err();
		}
		return responseValue.success(operatorVo);
	}

	@Override
	public ResponseValue<String> updateOperator(OperatorVo operatorVo) {
		ResponseValue<String> responseValue=new ResponseValue<String>();
		OperatorCompanyBean operatorCompanyBean = new OperatorCompanyBean();
		try{
			operatorCompanyBean.setCompanyKey(operatorVo.getCompanyKey());
			OperatorCompanyBean keyBean = operatorMapper.selectOne(operatorCompanyBean);
			if(keyBean != null && keyBean.getId()!=operatorVo.getId()){
				return responseValue.failure("key值存在！");
			}
			
			operatorCompanyBean.setCompanyKey(operatorVo.getCompanyKey());
			OperatorCompanyBean codeBean = operatorMapper.selectOne(operatorCompanyBean);
			if(codeBean != null && codeBean.getId()!=operatorVo.getId()){
				return responseValue.failure("编码存在！");
			}
			
			PropertyUtils.copyProperties(operatorCompanyBean,operatorVo);
			operatorCompanyBean.setUpdateTime(new Date());
			int num=operatorMapper.updateByPrimaryKeySelective(operatorCompanyBean);
			if(num<1){
				return responseValue.failure();
			}
			
		}catch(Exception e){
			logger.error("OperatorServiceImpl,updateOperator",e);
			return responseValue.errRollback();
		}
		return responseValue.success();
	}

	@Override
	public ResponseValue<String> updateStatusOperator(StatusVo statusVo){
		ResponseValue<String> responseValue=new ResponseValue<String>();
		OperatorCompanyBean operatorCompanyBean = new OperatorCompanyBean();
		int status=statusVo.getStatus();
		List<String> selfIds=statusVo.getIds();
		List<Long> companyKeys=statusVo.getCompanyKeys();
		/***调用oms 判断运营商下 有没有订单  (目前单个key判断接口)  start***/
		if(status==0){//失效
			com.zhilianbao.erp.oms.vo.OperatorVo omsOperatorVo=null;
			ResponseResult<Boolean> responseResult=new ResponseResult<Boolean>();
			try{
				for(Long key:companyKeys){
					omsOperatorVo=new com.zhilianbao.erp.oms.vo.OperatorVo();
					omsOperatorVo.setOperatorId(key);
					logger.info("调用oms查询运营商有没有订单接口，参数:"+JSON.toJSONString(omsOperatorVo));
					
					responseResult=httpOrderRestService.queryOperatorOrder(omsOperatorVo);
					
					String code=responseResult.getCode();
					if(!Constants.CODE_SUCCESS.equals(code)){
						return responseValue.failure(key+"调用oms查询运营商有没有订单，失败");
					}
					boolean data=responseResult.getData();
					if(data){
						return responseValue.failure("选择的运营商下有订单，不能失效");
					}
					logger.info(key+"调用oms查询运营商有没有订单接口，返回值:"+JSON.toJSONString(responseResult));
				}
			}catch(Exception e){
				logger.info("调用oms查询运营商有没有订单接口，异常:",e);
				return responseValue.err("调用oms查询运营商有没有订单，异常");
			}
			
		}
		/***调用oms 判断运营商下 有没有订单  end***/
		
		try{
			Iterable<String> ids=selfIds;
			Example example=new Example(OperatorCompanyBean.class);
		    Criteria criteria = example.createCriteria();
		    criteria.andIn("id", ids);
		
			operatorCompanyBean.setEnabled(status);
			operatorCompanyBean.setModifier(statusVo.getModifier());
			operatorCompanyBean.setUpdateTime(new Date());
			int num=operatorMapper.updateByExampleSelective(operatorCompanyBean, example);
			if(num<1){
				return responseValue.failure();
            } 
			
		}catch(Exception e){
			logger.error("OperatorServiceImpl,updateStatusOperator",e);
			return responseValue.errRollback();
		}
		return responseValue.success();
	}

	@Override
	public List<OperatorVo> mulOperatorName(List<Long> list) {
//		if(list == null || list.size() ==0){
//			logger.warn("根据运营商id查询名称，参数list 为空");
//			return null;
//		}
		List<OperatorVo> nameList=new ArrayList<OperatorVo>();
		try{
			nameList=operatorMapper.mulOperatorName(list);
		}catch(Exception e){
			logger.error("OperatorServiceImpl,mulOperatorName",e);
		}
		
		return nameList;
	}

	

}
