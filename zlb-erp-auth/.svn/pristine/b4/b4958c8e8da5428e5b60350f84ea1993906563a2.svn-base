package com.zhilianbao.erp.auth.impl.employee;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.zhilianbao.erp.auth.entity.employee.EmployeeBean;
import com.zhilianbao.erp.auth.mapper.employee.EmployeeMapper;
import com.zhilianbao.erp.auth.service.employee.IEmployeeService;
import com.zhilianbao.erp.auth.vo.employee.EmployeeSearchVo;
import com.zhilianbao.erp.auth.vo.employee.EmployeeVo;
import com.zhilianbao.erp.common.constant.Constants;
import com.zhilianbao.erp.common.constant.ResultEnum;
import com.zhilianbao.erp.common.entity.system.DictBean;
import com.zhilianbao.erp.common.util.cache.DictCacheUtil;
import com.zhilianbao.erp.common.vo.ResponseResult;

@Service
public class EmployeeServiceImpl implements IEmployeeService{
	
	private static Logger logger=LogManager.getLogger(EmployeeServiceImpl.class);
	
	@Autowired
	private EmployeeMapper employeeMapper;
	
	
	@Override
	public ResponseResult<EmployeeVo> queryEmployeeByPage(EmployeeSearchVo vo) {
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		try{
			PageHelper.offsetPage(vo.getOffset(), vo.getPageSize());
			Map<String,Object> map=new HashMap<String,Object>();
			map.put("vo", vo);
			List<EmployeeVo> list=employeeMapper.findByPage(map);
			PageInfo<EmployeeVo> page = new PageInfo<EmployeeVo>(list);
			long total = page.getTotal();// 获取数据库中的总条数
			List<EmployeeVo> carsList = page.getList();// 推荐使用这个获取结果集
			respResult.setRows(carsList);
			respResult.setTotal(total);
		}catch(Exception e){
			logger.error("通过条件查询员工列表出错!id={}",vo, e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		
		return respResult;
	}

	@Override
	public ResponseResult<EmployeeVo> queryEmployeeDetails(EmployeeVo key) {
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		try{
			EmployeeBean empBean=new EmployeeBean();
			empBean.setId(key.getId());
			EmployeeVo empVo=  employeeMapper.queryEmpDetail(empBean);
			respResult.setData(empVo);
		}catch(Exception e){
			logger.error("通过ID查询员工详情出错!id={}",key.getId(), e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}
	

	@Override
	public ResponseResult<EmployeeVo> addEmployee(EmployeeVo vo) {
		
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		EmployeeBean empBean=new EmployeeBean();
		try{
			PropertyUtils.copyProperties(empBean, vo);
			empBean.setId(null);
			employeeMapper.insertSelective(empBean);
			//logger.error("新添加员工ID",empBean.getId());
			String newKey="EA";
			String strId = String.valueOf(empBean.getId());
	        String add0="";
			for (int i = 0; i < 5-strId.length(); i++) {
				add0+="0";
			}
			newKey=newKey+add0+strId;
			EmployeeBean empBean2=new EmployeeBean();
			empBean2.setId(empBean.getId());
			empBean2.setUniqueKey(newKey);
			employeeMapper.updateByPrimaryKeySelective(empBean2);
		}catch(Exception e){
			logger.error("添加员工数据出错!",empBean, e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}

	@Override
	public ResponseResult<EmployeeVo> updateEmployee(EmployeeVo vo) {
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		try{
			EmployeeBean empBean=new EmployeeBean();
			PropertyUtils.copyProperties(empBean, vo);
			empBean.setUpdateTime(new Date());
			employeeMapper.updateByPrimaryKeySelective(empBean);
		}catch(Exception e){
			logger.error("员工更新数据出错{}",vo, e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}

	@Override
	public ResponseResult<EmployeeVo> deleteEmployee(EmployeeVo vo) {
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		try{
			EmployeeBean empBean=new EmployeeBean();
			empBean.setId(vo.getId());
			empBean.setDeleted(true);
			empBean.setUpdateTime(new Date());
			//employeeMapper.deleteByPrimaryKey(empBean);
			employeeMapper.updateByPrimaryKeySelective(empBean);
		}catch(Exception e){
			logger.error("员工删除数据出错{}",vo, e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}

	@Override
	public ResponseResult<EmployeeVo> updateEmployeeStatus(EmployeeVo vo) {
		ResponseResult<EmployeeVo> respResult=new ResponseResult<EmployeeVo>();
		try{
			EmployeeBean empBean=new EmployeeBean();
			empBean.setId(vo.getId());
			empBean.setEnabled(vo.getEnabled());
			empBean.setUpdateTime(new Date());
			employeeMapper.updateByPrimaryKeySelective(empBean);
		}catch(Exception e){
			logger.error("员工更新数据出错{}",vo, e);
			return new ResponseResult<EmployeeVo>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}

	@Override
	public ResponseResult<Map<String, Object>> initDropDownBox(Long operatorId) {
		ResponseResult<Map<String,Object>> respResult=new ResponseResult<Map<String,Object>>();
		try{
			List<DictBean> kindredIdList=DictCacheUtil.get(operatorId, Constants.AUTH_KINDRED_ID);
			List<DictBean> occupationIdList=DictCacheUtil.get(operatorId, Constants.AUTH_OCCUPATION_ID);
			List<DictBean> commonActiveList=DictCacheUtil.get(operatorId, Constants.TYPE_COMMON_ACTIVE);
			Map<String,Object> map=new HashMap<String,Object>();
			map.put("kindredIdList", kindredIdList);
			map.put("occupationIdList", occupationIdList);
			map.put("commonActiveList", commonActiveList);
			respResult.setData(map);
		}catch(Exception e){
			logger.error("此运营商查询列表出错!id={}",operatorId, e);
			return new ResponseResult<Map<String,Object>>(ResultEnum.SYS_ERR);
		}
		return respResult;
	}

	@Override
	public EmployeeVo findEmployeeByMobileNo(String mobileNo) {
		
		return employeeMapper.findByMobileNo(mobileNo);
	}
}
